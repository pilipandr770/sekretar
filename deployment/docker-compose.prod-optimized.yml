version: '3.8'

services:
  # Reverse Proxy / Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ai_secretary_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - ai_secretary_network

  # Main Application with Translation Optimizations
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: ai_secretary_app
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      # Translation-specific environment variables
      - TRANSLATION_CACHE_ENABLED=true
      - TRANSLATION_MONITORING_ENABLED=true
      - I18N_PERFORMANCE_MONITORING=true
      - TRANSLATION_ALERT_RECIPIENTS=${TRANSLATION_ALERT_RECIPIENTS}
      - BABEL_DEFAULT_LOCALE=en
      - BABEL_DEFAULT_TIMEZONE=UTC
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - translation_cache:/app/cache/translations
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ai_secretary_network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker with Translation Support
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: ai_secretary_worker
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      # Translation worker settings
      - TRANSLATION_CACHE_ENABLED=true
      - BABEL_DEFAULT_LOCALE=en
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - translation_cache:/app/cache/translations
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ai_secretary_network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.scheduler
    container_name: ai_secretary_scheduler
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - TRANSLATION_CACHE_ENABLED=true
    volumes:
      - ./logs:/app/logs
      - translation_cache:/app/cache/translations
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ai_secretary_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ai_secretary_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./deployment/postgres/backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ai_secretary_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis Cache and Message Broker with Translation Optimization
  redis:
    image: redis:7-alpine
    container_name: ai_secretary_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ai_secretary_network

  # Translation Health Check Service
  translation-health:
    build:
      context: .
      dockerfile: Dockerfile.health-check
    container_name: ai_secretary_translation_health
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - HEALTH_CHECK_INTERVAL=300
      - HEALTH_CHECK_TIMEOUT=30
    volumes:
      - ./logs:/app/logs
    depends_on:
      - app
      - redis
    restart: unless-stopped
    networks:
      - ai_secretary_network
    command: ["python", "-m", "app.services.translation_health_checker"]

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_secretary_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./deployment/monitoring/prometheus/translation-alerts.yml:/etc/prometheus/rules/translation-alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - ai_secretary_network

  # Monitoring - Grafana with Translation Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ai_secretary_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deployment/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    restart: unless-stopped
    networks:
      - ai_secretary_network

  # Translation File Backup Service
  translation-backup:
    image: alpine:latest
    container_name: ai_secretary_translation_backup
    volumes:
      - ./app/translations:/source/translations:ro
      - ./deployment/backups/translations:/backup/translations
      - ./deployment/scripts:/scripts:ro
    environment:
      - BACKUP_SCHEDULE=${TRANSLATION_BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${TRANSLATION_BACKUP_RETENTION:-30}
    command: |
      sh -c "
        apk add --no-cache dcron rsync &&
        echo '${TRANSLATION_BACKUP_SCHEDULE:-0 2 * * *} /scripts/backup-translations.sh' > /etc/crontabs/root &&
        crond -f -d 8
      "
    restart: unless-stopped
    networks:
      - ai_secretary_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  translation_cache:
    driver: local

networks:
  ai_secretary_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16