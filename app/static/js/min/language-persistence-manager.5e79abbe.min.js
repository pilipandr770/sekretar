class LanguagePersistenceManager{constructor(){this.storageKey = 'preferred_language';this.sessionKey = 'session_language';this.availableLanguages = ['en','de','uk'];this.defaultLanguage = 'en';this.init();}init(){const detectedLanguage = this.detectLanguage();this.setCurrentLanguage(detectedLanguage);window.addEventListener('storage',(e)=>{if(e.key === this.storageKey && e.newValue){this.handleLanguageChangeFromStorage(e.newValue);}});window.addEventListener('beforeunload',()=>{this.saveSessionState();});}detectLanguage(){console.log('Detecting language from multiple sources...');const urlLanguage = this.getLanguageFromURL();if(urlLanguage){console.log('Language detected from URL:',urlLanguage);this.persistLanguage(urlLanguage);return urlLanguage;}const storedLanguage = this.getStoredLanguage();if(storedLanguage){console.log('Language detected from localStorage:',storedLanguage);return storedLanguage;}const sessionLanguage = this.getSessionLanguage();if(sessionLanguage){console.log('Language detected from sessionStorage:',sessionLanguage);return sessionLanguage;}const htmlLanguage = this.getHTMLLanguage();if(htmlLanguage){console.log('Language detected from HTML lang attribute:',htmlLanguage);this.persistLanguage(htmlLanguage);return htmlLanguage;}const browserLanguage = this.getBrowserLanguage();if(browserLanguage){console.log('Language detected from browser:',browserLanguage);this.persistLanguage(browserLanguage);return browserLanguage;}console.log('Using default language:',this.defaultLanguage);this.persistLanguage(this.defaultLanguage);return this.defaultLanguage;}getLanguageFromURL(){try{const urlParams = new URLSearchParams(window.location.search);const lang = urlParams.get('lang');return this.validateLanguage(lang)? lang : null;}catch(error){console.warn('Error reading URL parameters:',error);return null;}}getStoredLanguage(){try{const stored = localStorage.getItem(this.storageKey);return this.validateLanguage(stored)? stored : null;}catch(error){console.warn('Error reading from localStorage:',error);return null;}}getSessionLanguage(){try{const session = sessionStorage.getItem(this.sessionKey);return this.validateLanguage(session)? session : null;}catch(error){console.warn('Error reading from sessionStorage:',error);return null;}}getHTMLLanguage(){try{const htmlLang = document.documentElement.lang;return this.validateLanguage(htmlLang)? htmlLang : null;}catch(error){console.warn('Error reading HTML lang attribute:',error);return null;}}getBrowserLanguage(){try{const languages = [ navigator.language,...(navigator.languages || [])];for(const lang of languages){if(lang){const langCode = lang.split('-')[0].toLowerCase();if(this.validateLanguage(langCode)){return langCode;}}}}catch(error){console.warn('Error detecting browser language:',error);}return null;}validateLanguage(language){return language && this.availableLanguages.includes(language.toLowerCase());}persistLanguage(language){if(!this.validateLanguage(language)){console.warn('Invalid language for persistence:',language);return false;}try{localStorage.setItem(this.storageKey,language);sessionStorage.setItem(this.sessionKey,language);document.documentElement.lang = language;console.log('Language persisted:',language);return true;}catch(error){console.error('Error persisting language:',error);return false;}}setCurrentLanguage(language){if(!this.validateLanguage(language)){console.warn('Invalid language:',language);return false;}this.persistLanguage(language);this.dispatchLanguageChangeEvent(language);return true;}getCurrentLanguage(){return this.getStoredLanguage()|| this.defaultLanguage;}clearLanguagePreference(){try{localStorage.removeItem(this.storageKey);sessionStorage.removeItem(this.sessionKey);console.log('Language preference cleared');return true;}catch(error){console.error('Error clearing language preference:',error);return false;}}handleLanguageChangeFromStorage(newLanguage){if(this.validateLanguage(newLanguage)){console.log('Language changed from another tab:',newLanguage);document.documentElement.lang = newLanguage;sessionStorage.setItem(this.sessionKey,newLanguage);this.dispatchLanguageChangeEvent(newLanguage);if(window.languageSwitcher && typeof window.languageSwitcher.updateCurrentLanguage === 'function'){window.languageSwitcher.updateCurrentLanguage(newLanguage);}}}saveSessionState(){const currentLanguage = this.getCurrentLanguage();if(currentLanguage){sessionStorage.setItem(this.sessionKey,currentLanguage);}}dispatchLanguageChangeEvent(language){const event = new CustomEvent('languagechange',{detail:{language,source: 'persistence-manager',timestamp: Date.now()}});window.dispatchEvent(event);}async syncWithServer(language){if(!this.validateLanguage(language)){return false;}try{const response = await fetch('/api/v1/user/language',{method: 'POST',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'},body: JSON.stringify({language})});if(response.ok){console.log('Language preference synced with server');return true;}else{console.warn('Failed to sync language preference with server:',response.status);return false;}}catch(error){console.warn('Error syncing language preference with server:',error);return false;}}async getServerLanguagePreference(){try{const response = await fetch('/api/v1/user/language');if(response.ok){const data = await response.json();if(data.success && data.data.language){const serverLanguage = data.data.language;if(this.validateLanguage(serverLanguage)){console.log('Server language preference:',serverLanguage);return serverLanguage;}}}}catch(error){console.warn('Error getting server language preference:',error);}return null;}async initializeWithServerPreference(){const serverLanguage = await this.getServerLanguagePreference();if(serverLanguage){const currentLanguage = this.getCurrentLanguage();if(serverLanguage !== currentLanguage){console.log('Using server language preference:',serverLanguage);this.setCurrentLanguage(serverLanguage);return serverLanguage;}}return this.getCurrentLanguage();}getDebugInfo(){return{currentLanguage: this.getCurrentLanguage(),urlLanguage: this.getLanguageFromURL(),storedLanguage: this.getStoredLanguage(),sessionLanguage: this.getSessionLanguage(),htmlLanguage: this.getHTMLLanguage(),browserLanguage: this.getBrowserLanguage(),availableLanguages: this.availableLanguages,defaultLanguage: this.defaultLanguage};}}window.LanguagePersistenceManager = LanguagePersistenceManager;