class I18nClient{constructor(locale = 'en',translations ={}){this.locale = locale;this.translations = translations;this.fallbackLocale = 'en';this.cache = new Map();this.formatters ={};this.initializeFormatters();this.translate = this.translate.bind(this);this.formatDate = this.formatDate.bind(this);this.formatNumber = this.formatNumber.bind(this);this.formatCurrency = this.formatCurrency.bind(this);this.setLocale = this.setLocale.bind(this);}initializeFormatters(){try{this.formatters.date = new Intl.DateTimeFormat(this.locale);this.formatters.dateShort = new Intl.DateTimeFormat(this.locale,{year: 'numeric',month: 'short',day: 'numeric'});this.formatters.dateLong = new Intl.DateTimeFormat(this.locale,{year: 'numeric',month: 'long',day: 'numeric'});this.formatters.time = new Intl.DateTimeFormat(this.locale,{hour: '2-digit',minute: '2-digit'});this.formatters.datetime = new Intl.DateTimeFormat(this.locale,{year: 'numeric',month: 'short',day: 'numeric',hour: '2-digit',minute: '2-digit'});this.formatters.number = new Intl.NumberFormat(this.locale);this.formatters.decimal = new Intl.NumberFormat(this.locale,{minimumFractionDigits: 2,maximumFractionDigits: 2});this.formatters.percent = new Intl.NumberFormat(this.locale,{style: 'percent'});this.formatters.currency = new Intl.NumberFormat(this.locale,{style: 'currency',currency: 'EUR'});if(Intl.RelativeTimeFormat){this.formatters.relativeTime = new Intl.RelativeTimeFormat(this.locale,{numeric: 'auto'});}}catch(error){console.warn('Failed to initialize formatters for locale:',this.locale,error);this.initializeFallbackFormatters();}}initializeFallbackFormatters(){this.formatters ={date:{format:(date)=> date.toLocaleDateString()},dateShort:{format:(date)=> date.toLocaleDateString()},dateLong:{format:(date)=> date.toLocaleDateString()},time:{format:(date)=> date.toLocaleTimeString()},datetime:{format:(date)=> date.toLocaleString()},number:{format:(num)=> num.toString()},decimal:{format:(num)=> num.toFixed(2)},percent:{format:(num)=>(num * 100).toFixed(1)+ '%'},currency:{format:(num)=> '€' + num.toFixed(2)}};}translate(key,params ={}){const cacheKey = `${key}:${JSON.stringify(params)}`;if(this.cache.has(cacheKey)){return this.cache.get(cacheKey);}let translation = this.getTranslation(key);if(params && Object.keys(params).length > 0){translation = this.interpolateParams(translation,params);}this.cache.set(cacheKey,translation);return translation;}getTranslation(key){if(this.translations[key]){return this.translations[key];}if(this.locale !== this.fallbackLocale && window.i18nFallbackTranslations){const fallback = window.i18nFallbackTranslations[key];if(fallback){console.warn(`Translation missing for '${key}' in ${this.locale},using fallback`);return fallback;}}console.warn(`Translation missing for key: ${key}`);return key;}interpolateParams(translation,params){return translation.replace(/\{\{(\w+)\}\}/g,(match,key)=>{return params[key] !== undefined ? params[key] : match;}).replace(/%\((\w+)\)s/g,(match,key)=>{return params[key] !== undefined ? params[key] : match;});}formatDate(date,format = 'short'){try{const dateObj = date instanceof Date ? date : new Date(date);if(isNaN(dateObj.getTime())){return date.toString();}const formatter = this.formatters[`date${format.charAt(0).toUpperCase()+ format.slice(1)}`] || this.formatters.date;return formatter.format(dateObj);}catch(error){console.error('Date formatting error:',error);return date.toString();}}formatNumber(number,options ={}){try{const{style = 'decimal',minimumFractionDigits,maximumFractionDigits}= options;let formatter = this.formatters.number;if(style === 'decimal'){formatter = this.formatters.decimal;}else if(style === 'percent'){formatter = this.formatters.percent;}if(minimumFractionDigits !== undefined || maximumFractionDigits !== undefined){const formatOptions ={...options};delete formatOptions.style;formatter = new Intl.NumberFormat(this.locale,formatOptions);}return formatter.format(number);}catch(error){console.error('Number formatting error:',error);return number.toString();}}formatCurrency(amount,currency = 'EUR',options ={}){try{const formatter = new Intl.NumberFormat(this.locale,{style: 'currency',currency: currency,...options});return formatter.format(amount);}catch(error){console.error('Currency formatting error:',error);return `${currency}${amount.toFixed(2)}`;}}formatRelativeTime(date,baseDate = new Date()){try{const dateObj = date instanceof Date ? date : new Date(date);const baseDateObj = baseDate instanceof Date ? baseDate : new Date(baseDate);if(isNaN(dateObj.getTime())|| isNaN(baseDateObj.getTime())){return this.formatDate(date);}const diffMs = dateObj.getTime()- baseDateObj.getTime();const diffSeconds = Math.floor(diffMs / 1000);const diffMinutes = Math.floor(diffSeconds / 60);const diffHours = Math.floor(diffMinutes / 60);const diffDays = Math.floor(diffHours / 24);if(this.formatters.relativeTime){if(Math.abs(diffDays)>= 1){return this.formatters.relativeTime.format(diffDays,'day');}else if(Math.abs(diffHours)>= 1){return this.formatters.relativeTime.format(diffHours,'hour');}else if(Math.abs(diffMinutes)>= 1){return this.formatters.relativeTime.format(diffMinutes,'minute');}else{return this.formatters.relativeTime.format(diffSeconds,'second');}}else{return this.formatRelativeTimeFallback(diffSeconds);}}catch(error){console.error('Relative time formatting error:',error);return this.formatDate(date);}}formatRelativeTimeFallback(diffSeconds){const absSeconds = Math.abs(diffSeconds);const isPast = diffSeconds < 0;const units = [{name: 'year',seconds: 31536000},{name: 'month',seconds: 2592000},{name: 'day',seconds: 86400},{name: 'hour',seconds: 3600},{name: 'minute',seconds: 60},{name: 'second',seconds: 1}];for(const unit of units){const count = Math.floor(absSeconds / unit.seconds);if(count >= 1){const unitKey = count === 1 ? unit.name : `${unit.name}s`;const timeStr = `${count}${this.translate(unitKey)}`;return isPast ? this.translate('time_ago',{time: timeStr}): this.translate('in_time',{time: timeStr});}}return this.translate('just_now');}async setLocale(locale){if(locale === this.locale){return true;}const previousLocale = this.locale;try{const success = await this.loadTranslations(locale);if(success){this.locale = locale;this.initializeFormatters();this.clearCache();document.documentElement.lang = locale;localStorage.setItem('preferred_language',locale);this.dispatchLocaleChangeEvent(locale,previousLocale);await this.updateServerLocale(locale);console.log(`Locale changed from ${previousLocale}to ${locale}`);return true;}return false;}catch(error){console.error('Failed to set locale:',error);return false;}}async loadTranslations(locale){try{const cacheKey = `i18n_translations_${locale}`;const cached = localStorage.getItem(cacheKey);if(cached){const{translations,timestamp}= JSON.parse(cached);if(Date.now()- timestamp < 3600000){this.translations = translations;return true;}}const response = await fetch(`/api/v1/i18n/translations/${locale}`);if(!response.ok){throw new Error(`Failed to load translations: ${response.status}`);}const data = await response.json();this.translations = data.translations ||{};localStorage.setItem(cacheKey,JSON.stringify({translations: this.translations,timestamp: Date.now()}));return true;}catch(error){console.error('Failed to load translations:',error);return false;}}async updateServerLocale(locale){try{const response = await fetch('/api/v1/user/language',{method: 'POST',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'},body: JSON.stringify({language: locale})});return response.ok;}catch(error){console.error('Failed to update server locale:',error);return false;}}dispatchLocaleChangeEvent(locale,previousLocale){const event = new CustomEvent('localechange',{detail:{locale,previousLocale}});window.dispatchEvent(event);}clearCache(){this.cache.clear();}getLocale(){return this.locale;}getAvailableLocales(){return window.i18nAvailableLocales || ['en','de','uk'];}isLocaleSupported(locale){return this.getAvailableLocales().includes(locale);}pluralize(count,singular,plural,zero = null){if(count === 0 && zero){return this.translate(zero,{count});}const key = count === 1 ? singular : plural;return this.translate(key,{count});}getTranslationStats(){const totalKeys = Object.keys(this.translations).length;const translatedKeys = Object.values(this.translations).filter(v => v && v.trim()).length;return{locale: this.locale,totalKeys,translatedKeys,coverage: totalKeys > 0 ?(translatedKeys / totalKeys)* 100 : 0};}}function _(key,params ={}){return window.i18n ? window.i18n.translate(key,params): key;}function formatDate(date,format = 'short'){return window.i18n ? window.i18n.formatDate(date,format): new Date(date).toLocaleDateString();}function formatNumber(number,options ={}){return window.i18n ? window.i18n.formatNumber(number,options): number.toString();}function formatCurrency(amount,currency = 'EUR',options ={}){return window.i18n ? window.i18n.formatCurrency(amount,currency,options): `${currency}${amount.toFixed(2)}`;}function formatRelativeTime(date,baseDate = new Date()){return window.i18n ? window.i18n.formatRelativeTime(date,baseDate): new Date(date).toLocaleDateString();}if(typeof module !== 'undefined' && module.exports){module.exports ={I18nClient,_,formatDate,formatNumber,formatCurrency,formatRelativeTime};}class LanguageSwitcher{constructor(options ={}){this.containerId = options.containerId || 'language-switcher';this.availableLanguages = options.availableLanguages ||{'en': 'English','de': 'Deutsch','uk': 'Українська'};this.currentLanguage = this.detectCurrentLanguage(options.currentLanguage);this.init();}detectCurrentLanguage(fallbackLanguage = 'en'){const urlParams = new URLSearchParams(window.location.search);const urlLang = urlParams.get('lang');if(urlLang && this.availableLanguages[urlLang]){console.log('Language detected from URL:',urlLang);return urlLang;}const storedLang = localStorage.getItem('preferred_language');if(storedLang && this.availableLanguages[storedLang]){console.log('Language detected from localStorage:',storedLang);return storedLang;}const htmlLang = document.documentElement.lang;if(htmlLang && this.availableLanguages[htmlLang]){console.log('Language detected from HTML lang attribute:',htmlLang);return htmlLang;}const finalLang = fallbackLanguage || 'en';console.log('Using fallback language:',finalLang);return finalLang;}init(){const container = document.getElementById(this.containerId);if(!container){console.warn('Language switcher container not found:',this.containerId);return;}container.innerHTML = this.createSwitcherHTML();this.addEventListeners();}createSwitcherHTML(){const currentLangName = this.availableLanguages[this.currentLanguage] || 'English';let html = ` <div class="dropdown"> <button class="btn btn-outline-light btn-sm dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false"> 🌐 ${currentLangName}</button> <ul class="dropdown-menu" aria-labelledby="languageDropdown"> `;for(const [code,name] of Object.entries(this.availableLanguages)){const isActive = code === this.currentLanguage;html += ` <li> <a class="dropdown-item ${isActive ? 'active' : ''}" href="#" data-language="${code}"> ${name}${isActive ? '✓' : ''}</a> </li> `;}html += ` </ul> </div> `;return html;}addEventListeners(){const container = document.getElementById(this.containerId);if(!container)return;container.addEventListener('click',(e)=>{if(e.target.matches('[data-language]')){e.preventDefault();const language = e.target.dataset.language;this.switchLanguage(language);}});}async switchLanguage(language){if(language === this.currentLanguage){return;}try{console.log(`Switching language from ${this.currentLanguage}to ${language}`);await this.updateServerLanguage(language);const url = new URL(window.location);url.searchParams.set('lang',language);localStorage.setItem('preferred_language',language);window.location.href = url.toString();}catch(error){console.error('Failed to switch language:',error);try{const url = new URL(window.location);url.searchParams.set('lang',language);window.location.href = url.toString();}catch(urlError){const separator = window.location.search ? '&' : '?';window.location.href = window.location.pathname + window.location.search + separator + 'lang=' + language;}}}async updateServerLanguage(language){try{const response = await fetch('/api/v1/user/language',{method: 'POST',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'},body: JSON.stringify({language: language})});if(!response.ok){console.warn('Failed to update server language preference:',response.status);}else{console.log('Server language preference updated successfully');}}catch(error){console.warn('Could not update server language preference:',error);}}updateCurrentLanguage(language){this.currentLanguage = language;this.init();}}window.LanguageSwitcher = LanguageSwitcher;class LanguagePersistenceManager{constructor(){this.storageKey = 'preferred_language';this.sessionKey = 'session_language';this.availableLanguages = ['en','de','uk'];this.defaultLanguage = 'en';this.init();}init(){const detectedLanguage = this.detectLanguage();this.setCurrentLanguage(detectedLanguage);window.addEventListener('storage',(e)=>{if(e.key === this.storageKey && e.newValue){this.handleLanguageChangeFromStorage(e.newValue);}});window.addEventListener('beforeunload',()=>{this.saveSessionState();});}detectLanguage(){console.log('Detecting language from multiple sources...');const urlLanguage = this.getLanguageFromURL();if(urlLanguage){console.log('Language detected from URL:',urlLanguage);this.persistLanguage(urlLanguage);return urlLanguage;}const storedLanguage = this.getStoredLanguage();if(storedLanguage){console.log('Language detected from localStorage:',storedLanguage);return storedLanguage;}const sessionLanguage = this.getSessionLanguage();if(sessionLanguage){console.log('Language detected from sessionStorage:',sessionLanguage);return sessionLanguage;}const htmlLanguage = this.getHTMLLanguage();if(htmlLanguage){console.log('Language detected from HTML lang attribute:',htmlLanguage);this.persistLanguage(htmlLanguage);return htmlLanguage;}const browserLanguage = this.getBrowserLanguage();if(browserLanguage){console.log('Language detected from browser:',browserLanguage);this.persistLanguage(browserLanguage);return browserLanguage;}console.log('Using default language:',this.defaultLanguage);this.persistLanguage(this.defaultLanguage);return this.defaultLanguage;}getLanguageFromURL(){try{const urlParams = new URLSearchParams(window.location.search);const lang = urlParams.get('lang');return this.validateLanguage(lang)? lang : null;}catch(error){console.warn('Error reading URL parameters:',error);return null;}}getStoredLanguage(){try{const stored = localStorage.getItem(this.storageKey);return this.validateLanguage(stored)? stored : null;}catch(error){console.warn('Error reading from localStorage:',error);return null;}}getSessionLanguage(){try{const session = sessionStorage.getItem(this.sessionKey);return this.validateLanguage(session)? session : null;}catch(error){console.warn('Error reading from sessionStorage:',error);return null;}}getHTMLLanguage(){try{const htmlLang = document.documentElement.lang;return this.validateLanguage(htmlLang)? htmlLang : null;}catch(error){console.warn('Error reading HTML lang attribute:',error);return null;}}getBrowserLanguage(){try{const languages = [ navigator.language,...(navigator.languages || [])];for(const lang of languages){if(lang){const langCode = lang.split('-')[0].toLowerCase();if(this.validateLanguage(langCode)){return langCode;}}}}catch(error){console.warn('Error detecting browser language:',error);}return null;}validateLanguage(language){return language && this.availableLanguages.includes(language.toLowerCase());}persistLanguage(language){if(!this.validateLanguage(language)){console.warn('Invalid language for persistence:',language);return false;}try{localStorage.setItem(this.storageKey,language);sessionStorage.setItem(this.sessionKey,language);document.documentElement.lang = language;console.log('Language persisted:',language);return true;}catch(error){console.error('Error persisting language:',error);return false;}}setCurrentLanguage(language){if(!this.validateLanguage(language)){console.warn('Invalid language:',language);return false;}this.persistLanguage(language);this.dispatchLanguageChangeEvent(language);return true;}getCurrentLanguage(){return this.getStoredLanguage()|| this.defaultLanguage;}clearLanguagePreference(){try{localStorage.removeItem(this.storageKey);sessionStorage.removeItem(this.sessionKey);console.log('Language preference cleared');return true;}catch(error){console.error('Error clearing language preference:',error);return false;}}handleLanguageChangeFromStorage(newLanguage){if(this.validateLanguage(newLanguage)){console.log('Language changed from another tab:',newLanguage);document.documentElement.lang = newLanguage;sessionStorage.setItem(this.sessionKey,newLanguage);this.dispatchLanguageChangeEvent(newLanguage);if(window.languageSwitcher && typeof window.languageSwitcher.updateCurrentLanguage === 'function'){window.languageSwitcher.updateCurrentLanguage(newLanguage);}}}saveSessionState(){const currentLanguage = this.getCurrentLanguage();if(currentLanguage){sessionStorage.setItem(this.sessionKey,currentLanguage);}}dispatchLanguageChangeEvent(language){const event = new CustomEvent('languagechange',{detail:{language,source: 'persistence-manager',timestamp: Date.now()}});window.dispatchEvent(event);}async syncWithServer(language){if(!this.validateLanguage(language)){return false;}try{const response = await fetch('/api/v1/user/language',{method: 'POST',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'},body: JSON.stringify({language})});if(response.ok){console.log('Language preference synced with server');return true;}else{console.warn('Failed to sync language preference with server:',response.status);return false;}}catch(error){console.warn('Error syncing language preference with server:',error);return false;}}async getServerLanguagePreference(){try{const response = await fetch('/api/v1/user/language');if(response.ok){const data = await response.json();if(data.success && data.data.language){const serverLanguage = data.data.language;if(this.validateLanguage(serverLanguage)){console.log('Server language preference:',serverLanguage);return serverLanguage;}}}}catch(error){console.warn('Error getting server language preference:',error);}return null;}async initializeWithServerPreference(){const serverLanguage = await this.getServerLanguagePreference();if(serverLanguage){const currentLanguage = this.getCurrentLanguage();if(serverLanguage !== currentLanguage){console.log('Using server language preference:',serverLanguage);this.setCurrentLanguage(serverLanguage);return serverLanguage;}}return this.getCurrentLanguage();}getDebugInfo(){return{currentLanguage: this.getCurrentLanguage(),urlLanguage: this.getLanguageFromURL(),storedLanguage: this.getStoredLanguage(),sessionLanguage: this.getSessionLanguage(),htmlLanguage: this.getHTMLLanguage(),browserLanguage: this.getBrowserLanguage(),availableLanguages: this.availableLanguages,defaultLanguage: this.defaultLanguage};}}window.LanguagePersistenceManager = LanguagePersistenceManager;class EnhancedLanguageSwitcher{constructor(options ={}){this.containerId = options.containerId || 'language-switcher';this.availableLanguages = options.availableLanguages ||{'en': 'English','de': 'Deutsch','uk': 'Українська'};this.persistenceManager = new LanguagePersistenceManager();this.currentLanguage = this.persistenceManager.getCurrentLanguage();this.isLoading = false;this.translationCache = new Map();this.init();}init(){const container = document.getElementById(this.containerId);if(!container){console.warn('Language switcher container not found:',this.containerId);return;}container.innerHTML = this.createSwitcherHTML();this.addEventListeners();document.documentElement.lang = this.currentLanguage;this.loadTranslationContext();}createSwitcherHTML(){const currentLangName = this.availableLanguages[this.currentLanguage] || 'English';let html = ` <div class="dropdown"> <button class="btn btn-outline-light btn-sm dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false" ${this.isLoading ? 'disabled' : ''}> ${this.isLoading ? '<span class="spinner-border spinner-border-sm me-1"></span>' : '🌐'}${currentLangName}</button> <ul class="dropdown-menu" aria-labelledby="languageDropdown"> `;for(const [code,name] of Object.entries(this.availableLanguages)){const isActive = code === this.currentLanguage;html += ` <li> <a class="dropdown-item ${isActive ? 'active' : ''}" href="#" data-language="${code}" ${this.isLoading ? 'style="pointer-events: none;opacity: 0.6;"' : ''}> ${name}${isActive ? '✓' : ''}</a> </li> `;}html += ` </ul> </div> `;return html;}addEventListeners(){const container = document.getElementById(this.containerId);if(!container)return;container.addEventListener('click',(e)=>{if(e.target.matches('[data-language]')){e.preventDefault();const language = e.target.dataset.language;this.switchLanguage(language);}});}async switchLanguage(language){if(language === this.currentLanguage || this.isLoading){return;}console.log(`Switching language from ${this.currentLanguage}to ${language}`);this.emitEvent('language:switch_start',{language: language,languageName: this.availableLanguages[language] || language});this.setLoadingState(true);try{this.persistenceManager.setCurrentLanguage(language);await this.persistenceManager.syncWithServer(language);await this.loadTranslationContext(language);const url = new URL(window.location);url.searchParams.set('lang',language);this.emitEvent('language:switch_success',{language: language,languageName: this.availableLanguages[language] || language});this.showLanguageChangeNotification(language);setTimeout(()=>{window.location.href = url.toString();},500);}catch(error){console.error('Failed to switch language:',error);this.emitEvent('language:switch_error',{language: language,message: 'Failed to switch language',error: error});this.setLoadingState(false);try{const url = new URL(window.location);url.searchParams.set('lang',language);window.location.href = url.toString();}catch(urlError){const separator = window.location.search ? '&' : '?';window.location.href = window.location.pathname + window.location.search + separator + 'lang=' + language;}}}async updateServerLanguage(language){try{const response = await fetch('/api/v1/user/language',{method: 'POST',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'},body: JSON.stringify({language: language})});if(!response.ok){console.warn('Failed to update server language preference:',response.status);}else{console.log('Server language preference updated successfully');}}catch(error){console.warn('Could not update server language preference:',error);}}async loadTranslationContext(language = null){const targetLanguage = language || this.currentLanguage;try{if(this.translationCache.has(targetLanguage)){console.log('Using cached translations for',targetLanguage);return this.translationCache.get(targetLanguage);}const response = await fetch(`/api/v1/i18n/translations/${targetLanguage}`);if(response.ok){const data = await response.json();if(data.success && data.data.translations){this.translationCache.set(targetLanguage,data.data.translations);if(window.i18n && typeof window.i18n.setLocale === 'function'){await window.i18n.setLocale(targetLanguage);}console.log('Translation context loaded for',targetLanguage);return data.data.translations;}}else{console.warn('Failed to load translation context:',response.status);}}catch(error){console.warn('Could not load translation context:',error);}return null;}setLoadingState(loading){this.isLoading = loading;const container = document.getElementById(this.containerId);if(container){container.innerHTML = this.createSwitcherHTML();this.addEventListeners();}}showLanguageChangeNotification(language){const languageName = this.availableLanguages[language] || language;const notification = document.createElement('div');notification.className = 'alert alert-success alert-dismissible fade show position-fixed';notification.style.cssText = 'top: 20px;right: 20px;z-index: 9999;min-width: 300px;';notification.innerHTML = ` <i class="fas fa-globe me-2"></i> Language changed to ${languageName}<button type="button" class="btn-close" data-bs-dismiss="alert"></button> `;document.body.appendChild(notification);setTimeout(()=>{if(notification.parentNode){notification.remove();}},3000);}updateCurrentLanguage(language){if(this.availableLanguages[language]){this.currentLanguage = language;this.persistenceManager.setCurrentLanguage(language);this.init();}}getCurrentLanguage(){return this.currentLanguage;}getAvailableLanguages(){return this.availableLanguages;}updateTranslatableElements(){const elements = document.querySelectorAll('[data-i18n]');elements.forEach(element =>{const key = element.dataset.i18n;const params = element.dataset.i18nParams ? JSON.parse(element.dataset.i18nParams):{};const translation = window._ ? window._(key,params): key;if(element.tagName === 'INPUT' &&(element.type === 'submit' || element.type === 'button')){element.value = translation;}else if(element.hasAttribute('placeholder')){element.placeholder = translation;}else if(element.hasAttribute('title')){element.title = translation;}else{element.textContent = translation;}});}clearCache(){this.translationCache.clear();}}emitEvent(eventName,data ={}){const event = new CustomEvent(eventName,{detail: data});document.dispatchEvent(event);}}window.EnhancedLanguageSwitcher = EnhancedLanguageSwitcher;