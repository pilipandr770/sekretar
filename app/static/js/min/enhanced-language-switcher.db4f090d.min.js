class EnhancedLanguageSwitcher{constructor(options ={}){this.containerId = options.containerId || 'language-switcher';this.availableLanguages = options.availableLanguages ||{'en': 'English','de': 'Deutsch','uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'};this.persistenceManager = new LanguagePersistenceManager();this.currentLanguage = this.persistenceManager.getCurrentLanguage();this.isLoading = false;this.translationCache = new Map();this.init();}init(){const container = document.getElementById(this.containerId);if(!container){console.warn('Language switcher container not found:',this.containerId);return;}container.innerHTML = this.createSwitcherHTML();this.addEventListeners();document.documentElement.lang = this.currentLanguage;this.loadTranslationContext();}createSwitcherHTML(){const currentLangName = this.availableLanguages[this.currentLanguage] || 'English';let html = ` <div class="dropdown"> <button class="btn btn-outline-light btn-sm dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false" ${this.isLoading ? 'disabled' : ''}> ${this.isLoading ? '<span class="spinner-border spinner-border-sm me-1"></span>' : 'üåê'}${currentLangName}</button> <ul class="dropdown-menu" aria-labelledby="languageDropdown"> `;for(const [code,name] of Object.entries(this.availableLanguages)){const isActive = code === this.currentLanguage;html += ` <li> <a class="dropdown-item ${isActive ? 'active' : ''}" href="#" data-language="${code}" ${this.isLoading ? 'style="pointer-events: none;opacity: 0.6;"' : ''}> ${name}${isActive ? '‚úì' : ''}</a> </li> `;}html += ` </ul> </div> `;return html;}addEventListeners(){const container = document.getElementById(this.containerId);if(!container)return;container.addEventListener('click',(e)=>{if(e.target.matches('[data-language]')){e.preventDefault();const language = e.target.dataset.language;this.switchLanguage(language);}});}async switchLanguage(language){if(language === this.currentLanguage || this.isLoading){return;}console.log(`Switching language from ${this.currentLanguage}to ${language}`);this.emitEvent('language:switch_start',{language: language,languageName: this.availableLanguages[language] || language});this.setLoadingState(true);try{this.persistenceManager.setCurrentLanguage(language);await this.persistenceManager.syncWithServer(language);await this.loadTranslationContext(language);const url = new URL(window.location);url.searchParams.set('lang',language);this.emitEvent('language:switch_success',{language: language,languageName: this.availableLanguages[language] || language});this.showLanguageChangeNotification(language);setTimeout(()=>{window.location.href = url.toString();},500);}catch(error){console.error('Failed to switch language:',error);this.emitEvent('language:switch_error',{language: language,message: 'Failed to switch language',error: error});this.setLoadingState(false);try{const url = new URL(window.location);url.searchParams.set('lang',language);window.location.href = url.toString();}catch(urlError){const separator = window.location.search ? '&' : '?';window.location.href = window.location.pathname + window.location.search + separator + 'lang=' + language;}}}async updateServerLanguage(language){try{const response = await fetch('/api/v1/user/language',{method: 'POST',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'},body: JSON.stringify({language: language})});if(!response.ok){console.warn('Failed to update server language preference:',response.status);}else{console.log('Server language preference updated successfully');}}catch(error){console.warn('Could not update server language preference:',error);}}async loadTranslationContext(language = null){const targetLanguage = language || this.currentLanguage;try{if(this.translationCache.has(targetLanguage)){console.log('Using cached translations for',targetLanguage);return this.translationCache.get(targetLanguage);}const response = await fetch(`/api/v1/i18n/translations/${targetLanguage}`);if(response.ok){const data = await response.json();if(data.success && data.data.translations){this.translationCache.set(targetLanguage,data.data.translations);if(window.i18n && typeof window.i18n.setLocale === 'function'){await window.i18n.setLocale(targetLanguage);}console.log('Translation context loaded for',targetLanguage);return data.data.translations;}}else{console.warn('Failed to load translation context:',response.status);}}catch(error){console.warn('Could not load translation context:',error);}return null;}setLoadingState(loading){this.isLoading = loading;const container = document.getElementById(this.containerId);if(container){container.innerHTML = this.createSwitcherHTML();this.addEventListeners();}}showLanguageChangeNotification(language){const languageName = this.availableLanguages[language] || language;const notification = document.createElement('div');notification.className = 'alert alert-success alert-dismissible fade show position-fixed';notification.style.cssText = 'top: 20px;right: 20px;z-index: 9999;min-width: 300px;';notification.innerHTML = ` <i class="fas fa-globe me-2"></i> Language changed to ${languageName}<button type="button" class="btn-close" data-bs-dismiss="alert"></button> `;document.body.appendChild(notification);setTimeout(()=>{if(notification.parentNode){notification.remove();}},3000);}updateCurrentLanguage(language){if(this.availableLanguages[language]){this.currentLanguage = language;this.persistenceManager.setCurrentLanguage(language);this.init();}}getCurrentLanguage(){return this.currentLanguage;}getAvailableLanguages(){return this.availableLanguages;}updateTranslatableElements(){const elements = document.querySelectorAll('[data-i18n]');elements.forEach(element =>{const key = element.dataset.i18n;const params = element.dataset.i18nParams ? JSON.parse(element.dataset.i18nParams):{};const translation = window._ ? window._(key,params): key;if(element.tagName === 'INPUT' &&(element.type === 'submit' || element.type === 'button')){element.value = translation;}else if(element.hasAttribute('placeholder')){element.placeholder = translation;}else if(element.hasAttribute('title')){element.title = translation;}else{element.textContent = translation;}});}clearCache(){this.translationCache.clear();}}emitEvent(eventName,data ={}){const event = new CustomEvent(eventName,{detail: data});document.dispatchEvent(event);}}window.EnhancedLanguageSwitcher = EnhancedLanguageSwitcher;