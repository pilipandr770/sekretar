class AuthenticationManager{constructor(){this.currentUser = null;this.authCallbacks = [];this.isInitialized = false;this.baseURL = window.location.origin;this.checkAuthStatus = this.checkAuthStatus.bind(this);this.handleLogin = this.handleLogin.bind(this);this.handleLogout = this.handleLogout.bind(this);this.showAuthenticatedUI = this.showAuthenticatedUI.bind(this);this.showUnauthenticatedUI = this.showUnauthenticatedUI.bind(this);}async init(){if(this.isInitialized){return;}console.log('Initializing Authentication Manager...');await this.checkAuthStatus();this.setupEventListeners();this.isInitialized = true;console.log('Authentication Manager initialized');}setupEventListeners(){window.addEventListener('storage',(e)=>{if(e.key === 'access_token'){if(e.newValue === null){this.handleLogout(false);}else if(e.oldValue === null){this.checkAuthStatus();}}});window.addEventListener('beforeunload',()=>{this.cleanup();});const loginForm = document.getElementById('loginForm');if(loginForm){loginForm.addEventListener('submit',this.handleLogin);}document.addEventListener('click',(e)=>{if(e.target.matches('[data-action="logout"]')|| e.target.closest('[data-action="logout"]')){e.preventDefault();this.handleLogout();}});}async checkAuthStatus(){const token = localStorage.getItem('access_token');if(!token){this.showUnauthenticatedUI();return false;}try{const response = await fetch('/api/v1/auth/me',{headers:{'Authorization': `Bearer ${token}`,'Content-Type': 'application/json'}});if(response.ok){const data = await response.json();if(data.success && data.data?.user){this.currentUser = data.data.user;this.showAuthenticatedUI(this.currentUser);this.notifyAuthStateChange(true,this.currentUser);return true;}}else if(response.status === 401){const refreshed = await this.refreshToken();if(refreshed){return await this.checkAuthStatus();}}}catch(error){console.error('Auth check failed:',error);if(window.errorHandler){window.errorHandler.handleNetworkError({url: '/api/v1/auth/me',error: error,isOnline: navigator.onLine});}}this.clearTokens();this.showUnauthenticatedUI();this.notifyAuthStateChange(false,null);return false;}async refreshToken(){const refreshToken = localStorage.getItem('refresh_token');if(!refreshToken){return false;}try{const response = await fetch('/api/v1/auth/refresh',{method: 'POST',headers:{'Content-Type': 'application/json','Authorization': `Bearer ${refreshToken}`}});if(response.ok){const data = await response.json();if(data.success && data.data?.access_token){localStorage.setItem('access_token',data.data.access_token);if(data.data.refresh_token){localStorage.setItem('refresh_token',data.data.refresh_token);}return true;}}}catch(error){console.error('Token refresh failed:',error);if(window.errorHandler){window.errorHandler.handleNetworkError({url: '/api/v1/auth/refresh',error: error,isOnline: navigator.onLine});}}return false;}async handleLogin(e){e.preventDefault();const form = e.target;const submitBtn = form.querySelector('button[type="submit"]');const spinner = submitBtn.querySelector('.spinner-border');this.emitEvent('auth:login_start');this.setLoadingState(submitBtn,spinner,true);this.clearFormErrors(form);try{const formData = new FormData(form);const response = await fetch('/api/v1/auth/login',{method: 'POST',headers:{'Content-Type': 'application/json',},body: JSON.stringify({email: formData.get('email'),password: formData.get('password')})});const data = await response.json();if(data.success){localStorage.setItem('access_token',data.data.access_token);if(data.data.refresh_token){localStorage.setItem('refresh_token',data.data.refresh_token);}this.currentUser = data.data.user;this.emitEvent('auth:login_success',{user: this.currentUser});this.showAlert('success',data.message || 'Login successful');this.showAuthenticatedUI(this.currentUser);this.notifyAuthStateChange(true,this.currentUser);this.hideLoginForm();setTimeout(()=>{const returnUrl = new URLSearchParams(window.location.search).get('return_url');window.location.href = returnUrl || '/dashboard';},1000);}else{this.emitEvent('auth:login_error',{message: data.error?.message || 'Login failed'});this.showAlert('danger',data.error?.message || 'Login failed');this.showFormErrors(form,data.error?.details?.validation_errors);}}catch(error){console.error('Login error:',error);this.emitEvent('auth:login_error',{message: 'An error occurred. Please try again.',error: error});if(window.errorHandler){window.errorHandler.handleNetworkError({url: '/api/v1/auth/login',error: error,isOnline: navigator.onLine});}else{this.showAlert('danger','An error occurred. Please try again.');}}finally{this.setLoadingState(submitBtn,spinner,false);}}async handleLogout(makeApiCall = true){this.emitEvent('auth:logout_start');try{if(makeApiCall){const token = localStorage.getItem('access_token');if(token){await fetch('/api/v1/auth/logout',{method: 'POST',headers:{'Authorization': `Bearer ${token}`,'Content-Type': 'application/json'}});}}}catch(error){console.error('Logout error:',error);if(window.errorHandler){window.errorHandler.handleNetworkError({url: '/api/v1/auth/logout',error: error,isOnline: navigator.onLine});}}finally{this.clearTokens();this.currentUser = null;this.showUnauthenticatedUI();this.emitEvent('auth:logout_complete');this.notifyAuthStateChange(false,null);if(!window.location.pathname.includes('/login')){window.location.href = '/login';}}}showAuthenticatedUI(user){console.log('Showing authenticated UI for:',user.email);const userNameElement = document.getElementById('userName');if(userNameElement){userNameElement.textContent = user.first_name || user.email;}this.toggleElement('auth-links',false);this.toggleElement('auth-links-register',false);this.toggleElement('user-links',true);this.toggleElement('user-links-divider',true);this.toggleElement('user-links-logout',true);if(user.role === 'owner' || user.role === 'manager'){this.toggleElement('user-links-users',true);}this.enableMainNavigation();this.hideLoginForm();this.showMainContent();}showUnauthenticatedUI(){console.log('Showing unauthenticated UI');this.toggleElement('auth-links',true);this.toggleElement('auth-links-register',true);this.toggleElement('user-links',false);this.toggleElement('user-links-users',false);this.toggleElement('user-links-divider',false);this.toggleElement('user-links-logout',false);const userNameElement = document.getElementById('userName');if(userNameElement){userNameElement.textContent = 'Account';}this.disableMainNavigation();this.showLoginFormIfNeeded();}hideLoginForm(){const loginForm = document.getElementById('loginForm');const loginCard = loginForm?.closest('.card');if(loginCard){loginCard.style.transition = 'opacity 0.3s ease-out';loginCard.style.opacity = '0';setTimeout(()=>{loginCard.style.display = 'none';},300);}}showLoginFormIfNeeded(){const protectedRoutes = ['/dashboard','/inbox','/crm','/calendar','/settings'];const currentPath = window.location.pathname;if(protectedRoutes.some(route => currentPath.includes(route))){const returnUrl = encodeURIComponent(window.location.href);window.location.href = `/login?return_url=${returnUrl}`;}}showMainContent(){const mainContent = document.querySelector('main');if(mainContent){mainContent.style.display = 'block';}}enableMainNavigation(){console.log('Navigation enabled for authenticated user');}disableMainNavigation(){console.log('Navigation disabled for unauthenticated user');}onAuthStateChange(callback){if(typeof callback === 'function'){this.authCallbacks.push(callback);}}notifyAuthStateChange(isAuthenticated,user){this.authCallbacks.forEach(callback =>{try{callback(isAuthenticated,user);}catch(error){console.error('Auth callback error:',error);}});}getAuthState(){return{isAuthenticated: !!this.currentUser,user: this.currentUser,token: localStorage.getItem('access_token')};}isAuthenticated(){return !!this.currentUser;}getCurrentUser(){return this.currentUser;}toggleElement(id,show){const element = document.getElementById(id);if(element){if(show){element.classList.remove('d-none');}else{element.classList.add('d-none');}}}setLoadingState(button,spinner,loading){if(button){button.disabled = loading;}if(spinner){if(loading){spinner.classList.remove('d-none');}else{spinner.classList.add('d-none');}}}clearFormErrors(form){form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));form.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');}showFormErrors(form,errors){if(errors){for(const [field,messages] of Object.entries(errors)){const input = form.querySelector(`[name="${field}"]`);if(input){input.classList.add('is-invalid');const feedback = input.nextElementSibling;if(feedback && feedback.classList.contains('invalid-feedback')){feedback.textContent = messages[0];}}}}}showAlert(type,message){const alertDiv = document.createElement('div');alertDiv.className = `alert alert-${type}alert-dismissible fade show`;alertDiv.innerHTML = ` ${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button> `;const container = document.querySelector('.container')|| document.querySelector('main');if(container){container.insertBefore(alertDiv,container.firstChild);}setTimeout(()=>{if(alertDiv.parentNode){alertDiv.remove();}},5000);}clearTokens(){localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');}cleanup(){this.authCallbacks = [];}}emitEvent(eventName,data ={}){const event = new CustomEvent(eventName,{detail: data});document.dispatchEvent(event);}}window.AuthenticationManager = AuthenticationManager;class NavigationController{constructor(authManager,uiStateManager){this.authManager = authManager;this.uiStateManager = uiStateManager;this.protectedRoutes = ['/dashboard','/inbox','/crm','/calendar','/settings','/users'];this.isInitialized = false;this.handleNavigationClick = this.handleNavigationClick.bind(this);this.updateActiveNavItem = this.updateActiveNavItem.bind(this);}init(){if(this.isInitialized){return;}console.log('Initializing Navigation Controller...');this.setupNavigationListeners();this.initializeNavigationState();if(this.authManager){this.authManager.onAuthStateChange((isAuthenticated,user)=>{this.onAuthStateChange(isAuthenticated,user);});}window.addEventListener('popstate',(event)=>{this.handleBrowserNavigation(event);});this.isInitialized = true;console.log('Navigation Controller initialized');}setupNavigationListeners(){const navLinks = document.querySelectorAll('#main-nav .nav-link');navLinks.forEach(link =>{if(!link.classList.contains('dropdown-toggle')){link.addEventListener('click',this.handleNavigationClick);}});const dropdownLinks = document.querySelectorAll('.dropdown-menu .dropdown-item');dropdownLinks.forEach(link =>{link.addEventListener('click',this.handleNavigationClick);});}async handleNavigationClick(event){const link = event.target.closest('a');if(!link || !link.href){return;}const href = link.getAttribute('href');if(href.startsWith('http')|| href.startsWith('#')){return;}const requiresAuth = this.protectedRoutes.some(route => href.includes(route));if(requiresAuth){const isAuthenticated = this.authManager ? this.authManager.isAuthenticated(): false;if(!isAuthenticated){event.preventDefault();this.showAuthRequiredMessage();setTimeout(()=>{const returnUrl = encodeURIComponent(window.location.origin + href);window.location.href = `/login?return_url=${returnUrl}`;},2000);return false;}}event.preventDefault();await this.navigateTo(href);}async navigateTo(href){try{this.showNavigationLoading(true);history.pushState(null,'',href);this.updateActiveNavItem();await this.loadPageContent(href);}catch(error){console.error('Navigation error:',error);this.showNavigationError('Failed to navigate. Please try again.');window.location.href = href;}finally{this.showNavigationLoading(false);}}async loadPageContent(href){if(this.supportsAjaxNavigation(href)){try{const response = await fetch(href,{headers:{'X-Requested-With': 'XMLHttpRequest','Accept': 'text/html'}});if(response.ok){const html = await response.text();this.updatePageContent(html);return;}}catch(error){console.warn('AJAX navigation failed,falling back to full page load:',error);}}window.location.href = href;}supportsAjaxNavigation(href){return false;}updatePageContent(html){const parser = new DOMParser();const newDoc = parser.parseFromString(html,'text/html');const newMain = newDoc.querySelector('main');const currentMain = document.querySelector('main');if(newMain && currentMain){currentMain.innerHTML = newMain.innerHTML;const newTitle = newDoc.querySelector('title');if(newTitle){document.title = newTitle.textContent;}this.reinitializePageComponents();}}reinitializePageComponents(){document.dispatchEvent(new CustomEvent('page:loaded',{detail:{url: window.location.href,timestamp: Date.now()}}));if(window.bootstrap){const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));tooltipTriggerList.map(function(tooltipTriggerEl){return new bootstrap.Tooltip(tooltipTriggerEl);});const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));popoverTriggerList.map(function(popoverTriggerEl){return new bootstrap.Popover(popoverTriggerEl);});}}updateActiveNavItem(){const currentPath = window.location.pathname;document.querySelectorAll('#main-nav .nav-link').forEach(link =>{link.classList.remove('active');});let activeLink = null;if(currentPath.includes('/dashboard')){activeLink = document.querySelector('#main-nav .nav-link[href*="dashboard"]');}else if(currentPath.includes('/inbox')){activeLink = document.querySelector('#main-nav .nav-link[href*="inbox"]');}else if(currentPath.includes('/crm')){activeLink = document.querySelector('#main-nav .nav-link[href*="crm"]');}else if(currentPath.includes('/calendar')){activeLink = document.querySelector('#main-nav .nav-link[href*="calendar"]');}if(activeLink){activeLink.classList.add('active');}if(this.uiStateManager){this.uiStateManager.updateActiveNavItem();}}onAuthStateChange(isAuthenticated,user){if(isAuthenticated){this.enableNavigation();}else{this.handleUnauthenticatedNavigation();}}enableNavigation(){const navLinks = document.querySelectorAll('#main-nav .nav-link');navLinks.forEach(link =>{link.classList.remove('disabled');link.style.pointerEvents = 'auto';link.style.opacity = '1';link.removeAttribute('title');});}handleUnauthenticatedNavigation(){const navLinks = document.querySelectorAll('#main-nav .nav-link');navLinks.forEach(link =>{const href = link.getAttribute('href');const requiresAuth = this.protectedRoutes.some(route => href && href.includes(route));if(requiresAuth){link.style.opacity = '0.6';link.setAttribute('title','Login required to access this feature');link.classList.add('auth-required');}else{link.style.opacity = '1';link.removeAttribute('title');link.classList.remove('auth-required');}});}hasRoutePermission(href,user = null){const currentUser = user ||(this.authManager ? this.authManager.getCurrentUser(): null);const requiresAuth = this.protectedRoutes.some(route => href.includes(route));if(requiresAuth && !currentUser){return false;}if(href.includes('/users')&& currentUser){return currentUser.role === 'owner' || currentUser.role === 'manager';}return true;}redirectToAppropriateRoute(){const currentPath = window.location.pathname;const isAuthenticated = this.authManager ? this.authManager.isAuthenticated(): false;if(currentPath.includes('/login')&& isAuthenticated){const returnUrl = new URLSearchParams(window.location.search).get('return_url');window.location.href = returnUrl || '/dashboard';return;}if(this.isProtectedRoute(currentPath)&& !isAuthenticated){const returnUrl = encodeURIComponent(window.location.href);window.location.href = `/login?return_url=${returnUrl}`;return;}if(currentPath === '/'){window.location.href = isAuthenticated ? '/dashboard' : '/login';return;}}showAuthRequiredMessage(){this.showAlert('warning','Please log in to access this feature.');}showNavigationLoading(loading){if(loading){const navbar = document.querySelector('.navbar');if(navbar && !navbar.querySelector('.nav-loading')){const loadingDiv = document.createElement('div');loadingDiv.className = 'nav-loading';loadingDiv.innerHTML = '<div class="spinner-border spinner-border-sm text-light" role="status"></div>';loadingDiv.style.cssText = 'position: absolute;top: 50%;right: 20px;transform: translateY(-50%);';navbar.style.position = 'relative';navbar.appendChild(loadingDiv);}}else{const loadingDiv = document.querySelector('.nav-loading');if(loadingDiv){loadingDiv.remove();}}}showNavigationError(message){this.showAlert('danger',message);}showAlert(type,message){const alertDiv = document.createElement('div');alertDiv.className = `alert alert-${type}alert-dismissible fade show`;alertDiv.innerHTML = ` ${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button> `;const container = document.querySelector('.container')|| document.querySelector('main');if(container){container.insertBefore(alertDiv,container.firstChild);}setTimeout(()=>{if(alertDiv.parentNode){alertDiv.remove();}},5000);}isProtectedRoute(path = window.location.pathname){return this.protectedRoutes.some(route => path.includes(route));}getActiveNavItem(){const currentPath = window.location.pathname;if(currentPath.includes('/dashboard'))return 'dashboard';if(currentPath.includes('/inbox'))return 'inbox';if(currentPath.includes('/crm'))return 'crm';if(currentPath.includes('/calendar'))return 'calendar';if(currentPath.includes('/settings'))return 'settings';if(currentPath.includes('/users'))return 'users';return null;}handleBrowserNavigation(event){this.updateActiveNavItem();const currentPath = window.location.pathname;const isAuthenticated = this.authManager ? this.authManager.isAuthenticated(): false;if(this.isProtectedRoute(currentPath)&& !isAuthenticated){const returnUrl = encodeURIComponent(window.location.href);window.location.href = `/login?return_url=${returnUrl}`;}}initializeNavigationState(){this.updateActiveNavItem();this.redirectToAppropriateRoute();const isAuthenticated = this.authManager ? this.authManager.isAuthenticated(): false;if(isAuthenticated){this.enableNavigation();}else{this.handleUnauthenticatedNavigation();}}cleanup(){const navLinks = document.querySelectorAll('#main-nav .nav-link,.dropdown-menu .dropdown-item');navLinks.forEach(link =>{link.removeEventListener('click',this.handleNavigationClick);});window.removeEventListener('popstate',this.handleBrowserNavigation);}}window.NavigationController = NavigationController;class DropdownManager{constructor(){this.dropdowns = new Map();this.isInitialized = false;this.activeDropdown = null;this.handleDropdownToggle = this.handleDropdownToggle.bind(this);this.handleDropdownItemClick = this.handleDropdownItemClick.bind(this);this.handleDocumentClick = this.handleDocumentClick.bind(this);this.handleKeydown = this.handleKeydown.bind(this);}init(){if(this.isInitialized){return;}console.log('Initializing Dropdown Manager...');this.initializeBootstrapDropdowns();this.setupEventListeners();this.setupDropdownTracking();this.isInitialized = true;console.log('Dropdown Manager initialized');}initializeBootstrapDropdowns(){if(!window.bootstrap){console.warn('Bootstrap not available,dropdown functionality may be limited');return;}const dropdownToggles = document.querySelectorAll('[data-bs-toggle="dropdown"]');dropdownToggles.forEach(toggle =>{try{const dropdown = new bootstrap.Dropdown(toggle);const dropdownId = toggle.id || `dropdown-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;if(!toggle.id){toggle.id = dropdownId;}this.dropdowns.set(dropdownId,{element: toggle,bootstrap: dropdown,menu: toggle.nextElementSibling || document.querySelector(`[aria-labelledby="${toggle.id}"]`),isOpen: false});console.log(`Initialized dropdown: ${dropdownId}`);}catch(error){console.error('Failed to initialize dropdown:',toggle,error);}});}setupEventListeners(){document.addEventListener('click',(e)=>{const toggle = e.target.closest('[data-bs-toggle="dropdown"]');if(toggle){this.handleDropdownToggle(e,toggle);}});document.addEventListener('click',(e)=>{const dropdownItem = e.target.closest('.dropdown-item');if(dropdownItem){this.handleDropdownItemClick(e,dropdownItem);}});document.addEventListener('click',this.handleDocumentClick);document.addEventListener('keydown',this.handleKeydown);document.addEventListener('show.bs.dropdown',(e)=>{this.onDropdownShow(e);});document.addEventListener('shown.bs.dropdown',(e)=>{this.onDropdownShown(e);});document.addEventListener('hide.bs.dropdown',(e)=>{this.onDropdownHide(e);});document.addEventListener('hidden.bs.dropdown',(e)=>{this.onDropdownHidden(e);});}setupDropdownTracking(){this.dropdowns.forEach((dropdown,id)=>{const{element,menu}= dropdown;element.setAttribute('data-dropdown-id',id);if(menu){menu.setAttribute('data-dropdown-id',id);}});}handleDropdownToggle(event,toggle){const dropdownId = toggle.getAttribute('data-dropdown-id')|| toggle.id;const dropdown = this.dropdowns.get(dropdownId);if(!dropdown){console.warn('Dropdown not found:',dropdownId);return;}this.closeAllDropdowns(dropdownId);}handleDropdownItemClick(event,item){const href = item.getAttribute('href');const action = item.getAttribute('data-action');if(action){event.preventDefault();this.executeAction(action,item);}else if(href && href !== '#'){console.log('Dropdown navigation:',href);}else if(href === '#'){event.preventDefault();}if(!item.closest('.dropdown-submenu')){this.closeDropdownContaining(item);}}executeAction(action,item){console.log('Executing dropdown action:',action);switch(action){case 'logout': this.handleLogout();break;case 'settings': this.navigateToSettings();break;case 'profile': this.navigateToProfile();break;case 'users': this.navigateToUsers();break;default: console.warn('Unknown dropdown action:',action);if(window[action] && typeof window[action] === 'function'){window[action]();}else{console.error('No handler found for action:',action);}break;}}handleLogout(){if(window.aiSecretaryApp && window.aiSecretaryApp.authManager){window.aiSecretaryApp.authManager.handleLogout();}else if(window.logout && typeof window.logout === 'function'){window.logout();}else{console.error('No logout handler available');window.location.href = '/logout';}}navigateToSettings(){if(window.aiSecretaryApp && window.aiSecretaryApp.navigationController){window.aiSecretaryApp.navigationController.navigateTo('/settings');}else{window.location.href = '/settings';}}navigateToProfile(){if(window.aiSecretaryApp && window.aiSecretaryApp.navigationController){window.aiSecretaryApp.navigationController.navigateTo('/profile');}else{window.location.href = '/profile';}}navigateToUsers(){if(window.aiSecretaryApp && window.aiSecretaryApp.navigationController){window.aiSecretaryApp.navigationController.navigateTo('/users');}else{window.location.href = '/users';}}handleDocumentClick(event){const clickedDropdown = event.target.closest('.dropdown');if(!clickedDropdown){this.closeAllDropdowns();}}handleKeydown(event){if(event.key === 'Escape'){this.closeAllDropdowns();}if(this.activeDropdown &&(event.key === 'ArrowDown' || event.key === 'ArrowUp')){event.preventDefault();this.handleArrowKeyNavigation(event.key);}}handleArrowKeyNavigation(key){if(!this.activeDropdown)return;const dropdown = this.dropdowns.get(this.activeDropdown);if(!dropdown || !dropdown.menu)return;const items = dropdown.menu.querySelectorAll('.dropdown-item:not(.disabled)');if(items.length === 0)return;const currentFocus = dropdown.menu.querySelector('.dropdown-item:focus');let currentIndex = currentFocus ? Array.from(items).indexOf(currentFocus): -1;if(key === 'ArrowDown'){currentIndex =(currentIndex + 1)% items.length;}else if(key === 'ArrowUp'){currentIndex = currentIndex <= 0 ? items.length - 1 : currentIndex - 1;}items[currentIndex].focus();}onDropdownShow(event){const toggle = event.target;const dropdownId = toggle.getAttribute('data-dropdown-id')|| toggle.id;const dropdown = this.dropdowns.get(dropdownId);if(dropdown){dropdown.isOpen = true;this.activeDropdown = dropdownId;console.log('Dropdown showing:',dropdownId);}}onDropdownShown(event){const toggle = event.target;const dropdownId = toggle.getAttribute('data-dropdown-id')|| toggle.id;console.log('Dropdown shown:',dropdownId);const dropdown = this.dropdowns.get(dropdownId);if(dropdown && dropdown.menu){const firstItem = dropdown.menu.querySelector('.dropdown-item:not(.disabled)');if(firstItem){}}}onDropdownHide(event){const toggle = event.target;const dropdownId = toggle.getAttribute('data-dropdown-id')|| toggle.id;const dropdown = this.dropdowns.get(dropdownId);if(dropdown){dropdown.isOpen = false;console.log('Dropdown hiding:',dropdownId);}}onDropdownHidden(event){const toggle = event.target;const dropdownId = toggle.getAttribute('data-dropdown-id')|| toggle.id;console.log('Dropdown hidden:',dropdownId);if(this.activeDropdown === dropdownId){this.activeDropdown = null;}}closeAllDropdowns(exceptId = null){this.dropdowns.forEach((dropdown,id)=>{if(id !== exceptId && dropdown.isOpen && dropdown.bootstrap){try{dropdown.bootstrap.hide();}catch(error){console.error('Error closing dropdown:',id,error);}}});}closeDropdownContaining(element){const dropdownMenu = element.closest('.dropdown-menu');if(dropdownMenu){const dropdownId = dropdownMenu.getAttribute('data-dropdown-id');const dropdown = this.dropdowns.get(dropdownId);if(dropdown && dropdown.bootstrap){try{dropdown.bootstrap.hide();}catch(error){console.error('Error closing dropdown:',dropdownId,error);}}}}getDropdownState(dropdownId){const dropdown = this.dropdowns.get(dropdownId);return dropdown ?{id: dropdownId,isOpen: dropdown.isOpen,element: dropdown.element,menu: dropdown.menu}: null;}getAllDropdownStates(){const states ={};this.dropdowns.forEach((dropdown,id)=>{states[id] ={isOpen: dropdown.isOpen,element: dropdown.element,menu: dropdown.menu};});return states;}refresh(){console.log('Refreshing dropdown manager...');this.dropdowns.clear();this.activeDropdown = null;this.initializeBootstrapDropdowns();this.setupDropdownTracking();console.log('Dropdown manager refreshed');}cleanup(){document.removeEventListener('click',this.handleDocumentClick);document.removeEventListener('keydown',this.handleKeydown);this.dropdowns.forEach((dropdown)=>{if(dropdown.bootstrap && typeof dropdown.bootstrap.dispose === 'function'){try{dropdown.bootstrap.dispose();}catch(error){console.error('Error disposing dropdown:',error);}}});this.dropdowns.clear();this.activeDropdown = null;this.isInitialized = false;console.log('Dropdown manager cleaned up');}}window.DropdownManager = DropdownManager;