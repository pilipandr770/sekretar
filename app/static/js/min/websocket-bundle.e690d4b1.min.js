class WebSocketClient{constructor(){this.socket = null;this.isConnected = false;this.reconnectAttempts = 0;this.maxReconnectAttempts = 5;this.reconnectDelay = 1000;this.currentConversation = null;this.typingTimer = null;this.typingTimeout = 3000;this.connectionQuality = 'unknown';this.pingTimes = [];this.maxPingHistory = 10;this.lastPingTime = null;this.pingInterval = null;this.pongTimeout = null;this.messageHandlers = new Map();this.notificationHandlers = [];this.init();}init(){if(typeof io === 'undefined'){console.warn('Socket.IO not loaded,real-time features disabled');return;}this.connect();}connect(){const token = localStorage.getItem('access_token');if(!token){console.debug('No access token available for WebSocket connection');return;}this.emitCustomEvent('websocket:connecting');try{const socketPath = '/socket.io/';this.socket = io({auth:{token: token},transports: ['websocket','polling'],autoConnect: false,path: socketPath,timeout: 10000,forceNew: true});this.setupEventHandlers();this.socket.connect();}catch(error){console.error('Failed to initialize WebSocket connection:',error);this.emitCustomEvent('websocket:initialization_failed',{error: error.message});if(window.errorHandler){window.errorHandler.handleJavaScriptError({message: `WebSocket initialization failed: ${error.message}`,filename: 'websocket-client.js',error: error,type: 'websocket'});}}}setupEventHandlers(){if(!this.socket)return;this.socket.on('connect',()=>{console.log('WebSocket connected');this.isConnected = true;this.reconnectAttempts = 0;this.reconnectDelay = 1000;this.showConnectionStatus('connected','Real-time features enabled');this.emitCustomEvent('websocket:connected');});this.socket.on('disconnect',(reason)=>{console.log('WebSocket disconnected:',reason);this.isConnected = false;let statusMessage = 'Connection lost';if(reason === 'io server disconnect'){statusMessage = 'Server disconnected - trying to reconnect';}else if(reason === 'io client disconnect'){statusMessage = 'Disconnected';}else if(reason === 'ping timeout'){statusMessage = 'Connection timeout - reconnecting';}else if(reason === 'transport close'){statusMessage = 'Connection closed - reconnecting';}this.showConnectionStatus('disconnected',statusMessage);this.emitCustomEvent('websocket:disconnected',{reason});if(reason !== 'io client disconnect'){this.scheduleReconnect();}});this.socket.on('connect_error',(error)=>{console.error('WebSocket connection error:',error);if(error.description){console.error('Error description:',error.description);}if(error.context){console.error('Error context:',error.context);}if(error.type){console.error('Error type:',error.type);}this.emitCustomEvent('websocket:connection_error',{error: error.message || error.description || 'Unknown connection error',type: error.type,context: error.context});this.scheduleReconnect();});this.socket.on('connected',(data)=>{console.log('WebSocket authentication successful:',data);});this.socket.on('new_message',(data)=>{this.handleNewMessage(data);});this.socket.on('message_updated',(data)=>{this.handleMessageUpdate(data);});this.socket.on('conversation_updated',(data)=>{this.handleConversationUpdate(data);});this.socket.on('user_typing',(data)=>{this.handleTypingIndicator(data);});this.socket.on('notification',(data)=>{this.handleNotification(data);});this.socket.on('tenant_notification',(data)=>{this.handleTenantNotification(data);});this.socket.on('lead_updated',(data)=>{this.handleLeadUpdate(data);});this.socket.on('appointment_updated',(data)=>{this.handleAppointmentUpdate(data);});this.socket.on('system_alert',(data)=>{this.handleSystemAlert(data);});this.socket.on('pong',()=>{if(this.pongTimeout){clearTimeout(this.pongTimeout);this.pongTimeout = null;}if(this.lastPingTime){const pingTime = Date.now()- this.lastPingTime;console.debug(`WebSocket ping: ${pingTime}ms`);this.pingTimes.push(pingTime);if(this.pingTimes.length > this.maxPingHistory){this.pingTimes.shift();}this.updateConnectionQuality();}});this.startPingInterval();}scheduleReconnect(){if(this.reconnectAttempts >= this.maxReconnectAttempts){console.error('Max reconnection attempts reached');this.emitCustomEvent('websocket:max_reconnect_attempts');this.showConnectionStatus('failed','Connection failed - please refresh the page');return;}this.reconnectAttempts++;const delay = Math.min(this.reconnectDelay * Math.pow(2,this.reconnectAttempts - 1),30000);console.log(`Attempting to reconnect in ${delay}ms(attempt ${this.reconnectAttempts})`);this.emitCustomEvent('websocket:reconnecting',{attempt: this.reconnectAttempts});this.showConnectionStatus('reconnecting',`Reconnecting in ${Math.ceil(delay/1000)}s(attempt ${this.reconnectAttempts})`);this.showReconnectCountdown(delay);setTimeout(()=>{if(!this.isConnected){this.showConnectionStatus('connecting','Attempting to reconnect...');this.connect();}},delay);}showReconnectCountdown(totalDelay){const startTime = Date.now();const updateInterval = 1000;const updateCountdown =()=>{const elapsed = Date.now()- startTime;const remaining = Math.max(0,totalDelay - elapsed);const secondsRemaining = Math.ceil(remaining / 1000);if(remaining > 0 && !this.isConnected){this.showConnectionStatus('reconnecting',`Reconnecting in ${secondsRemaining}s(attempt ${this.reconnectAttempts})`);setTimeout(updateCountdown,updateInterval);}};updateCountdown();}showConnectionStatus(status,message){this.emitCustomEvent('websocket:status_change',{status,message});const statusElement = document.getElementById('ws-status');if(statusElement){const messageElement = statusElement.querySelector('.ws-status-message');if(messageElement){statusElement.className = `ws-status ${status}`;messageElement.textContent = message;statusElement.style.display = 'block';if(status === 'connected'){setTimeout(()=>{if(statusElement.classList.contains('connected')){statusElement.style.display = 'none';}},3000);}}}}startPingInterval(){this.pingInterval = setInterval(()=>{if(this.isConnected && this.socket){this.lastPingTime = Date.now();this.socket.emit('ping');this.pongTimeout = setTimeout(()=>{console.warn('Pong not received within timeout,connection may be stale');this.handleStaleConnection();},10000);}},30000);}handleStaleConnection(){console.log('Handling stale connection');if(this.socket && this.isConnected){this.socket.disconnect();this.isConnected = false;this.showConnectionStatus('reconnecting','Connection appears stale - reconnecting');this.scheduleReconnect();}}joinConversation(conversationId){if(!this.isConnected || !this.socket){console.warn('Cannot join conversation: WebSocket not connected');return;}if(this.currentConversation && this.currentConversation !== conversationId){this.leaveConversation(this.currentConversation);}this.currentConversation = conversationId;this.socket.emit('join_conversation',{conversation_id: conversationId});}leaveConversation(conversationId){if(!this.isConnected || !this.socket){return;}this.socket.emit('leave_conversation',{conversation_id: conversationId});if(this.currentConversation === conversationId){this.currentConversation = null;}}startTyping(conversationId){if(!this.isConnected || !this.socket){return;}this.socket.emit('typing_start',{conversation_id: conversationId});if(this.typingTimer){clearTimeout(this.typingTimer);}this.typingTimer = setTimeout(()=>{this.stopTyping(conversationId);},this.typingTimeout);}stopTyping(conversationId){if(!this.isConnected || !this.socket){return;}this.socket.emit('typing_stop',{conversation_id: conversationId});if(this.typingTimer){clearTimeout(this.typingTimer);this.typingTimer = null;}}handleNewMessage(data){console.log('New message received:',data);this.emitCustomEvent('message:new',data);if(data.conversation_id !== this.currentConversation){this.showNotification('New Message',{body: data.message.content,icon: '/static/images/message-icon.png',tag: `message-${data.message.id}`});}}handleMessageUpdate(data){console.log('Message updated:',data);this.emitCustomEvent('message:updated',data);}handleConversationUpdate(data){console.log('Conversation updated:',data);this.emitCustomEvent('conversation:updated',data);}handleTypingIndicator(data){console.log('Typing indicator:',data);this.emitCustomEvent('typing:indicator',data);}handleNotification(data){console.log('Notification received:',data);this.emitCustomEvent('notification:received',data);this.showNotification(data.title || 'Notification',{body: data.message,icon: data.icon || '/static/images/notification-icon.png',tag: data.id});}handleTenantNotification(data){console.log('Tenant notification received:',data);this.emitCustomEvent('notification:tenant',data);this.showNotification(data.title || 'System Notification',{body: data.message,icon: '/static/images/system-icon.png',tag: `tenant-${data.id}`});}handleLeadUpdate(data){console.log('Lead updated:',data);this.emitCustomEvent('lead:updated',data);}handleAppointmentUpdate(data){console.log('Appointment updated:',data);this.emitCustomEvent('appointment:updated',data);this.showNotification('Appointment Update',{body: `Appointment "${data.appointment.title}" has been updated`,icon: '/static/images/calendar-icon.png',tag: `appointment-${data.appointment.id}`});}handleSystemAlert(data){console.log('System alert:',data);this.emitCustomEvent('alert:system',data);this.showNotification(data.title || 'System Alert',{body: data.message,icon: '/static/images/alert-icon.png',tag: `alert-${data.id}`,requireInteraction: data.urgent});}async showNotification(title,options ={}){if(!('Notification' in window)){console.warn('Browser does not support notifications');return;}let permission = Notification.permission;if(permission === 'default'){permission = await Notification.requestPermission();}if(permission === 'granted'){const notification = new Notification(title,{...options,badge: '/static/images/badge-icon.png'});if(!options.requireInteraction){setTimeout(()=>{notification.close();},5000);}return notification;}}emitCustomEvent(eventName,data ={}){const event = new CustomEvent(eventName,{detail: data});document.dispatchEvent(event);}on(eventName,handler){document.addEventListener(eventName,handler);}off(eventName,handler){document.removeEventListener(eventName,handler);}isConnectedToWebSocket(){return this.isConnected;}reconnectManually(){console.log('Manual reconnection requested');this.reconnectAttempts = 0;this.showConnectionStatus('connecting','Connecting...');if(this.socket){this.socket.disconnect();}setTimeout(()=>{this.connect();},1000);}updateConnectionQuality(){if(this.pingTimes.length === 0){this.connectionQuality = 'unknown';return;}const avgPing = this.pingTimes.reduce((a,b)=> a + b,0)/ this.pingTimes.length;if(avgPing < 100){this.connectionQuality = 'excellent';}else if(avgPing < 300){this.connectionQuality = 'good';}else if(avgPing < 1000){this.connectionQuality = 'fair';}else{this.connectionQuality = 'poor';}this.emitCustomEvent('websocket:quality_change',{quality: this.connectionQuality,avgPing: Math.round(avgPing),pingTimes: [...this.pingTimes]});}getConnectionStats(){const avgPing = this.pingTimes.length > 0 ? Math.round(this.pingTimes.reduce((a,b)=> a + b,0)/ this.pingTimes.length): null;return{isConnected: this.isConnected,reconnectAttempts: this.reconnectAttempts,maxReconnectAttempts: this.maxReconnectAttempts,currentConversation: this.currentConversation,connectionQuality: this.connectionQuality,averagePing: avgPing,recentPingTimes: [...this.pingTimes]};}disconnect(){if(this.socket){this.socket.disconnect();this.socket = null;}this.isConnected = false;this.currentConversation = null;if(this.typingTimer){clearTimeout(this.typingTimer);this.typingTimer = null;}if(this.pingInterval){clearInterval(this.pingInterval);this.pingInterval = null;}if(this.pongTimeout){clearTimeout(this.pongTimeout);this.pongTimeout = null;}this.showConnectionStatus('disconnected','Disconnected');}}let wsClient = null;document.addEventListener('DOMContentLoaded',()=>{const token = localStorage.getItem('access_token');if(token){wsClient = new WebSocketClient();window.wsClient = wsClient;}else{console.debug('WebSocket client not initialized - no authentication token');}});document.addEventListener('user:login',()=>{if(!wsClient){wsClient = new WebSocketClient();window.wsClient = wsClient;}});document.addEventListener('user:logout',()=>{if(wsClient){wsClient.disconnect();wsClient = null;window.wsClient = null;}});if(typeof module !== 'undefined' && module.exports){module.exports = WebSocketClient;}class WebSocketStatusDashboard{constructor(){this.isVisible = false;this.dashboard = null;this.updateInterval = null;this.init();}init(){this.createDashboard();this.bindEvents();this.startUpdating();}createDashboard(){this.dashboard = document.createElement('div');this.dashboard.id = 'ws-dashboard';this.dashboard.className = 'ws-dashboard';this.dashboard.innerHTML = ` <div class="ws-dashboard-header"> <h6>WebSocket Status</h6> <button class="btn-close" aria-label="Close"></button> </div> <div class="ws-dashboard-content"> <div class="ws-stat"> <label>Status:</label> <span id="ws-dash-status">Unknown</span> </div> <div class="ws-stat"> <label>Quality:</label> <span id="ws-dash-quality">Unknown</span> </div> <div class="ws-stat"> <label>Avg Ping:</label> <span id="ws-dash-ping">-</span> </div> <div class="ws-stat"> <label>Reconnect Attempts:</label> <span id="ws-dash-attempts">0</span> </div> <div class="ws-stat"> <label>Current Room:</label> <span id="ws-dash-room">None</span> </div> <div class="ws-dashboard-actions"> <button id="ws-dash-reconnect" class="btn btn-sm btn-primary">Reconnect</button> <button id="ws-dash-disconnect" class="btn btn-sm btn-secondary">Disconnect</button> </div> </div> `;document.body.appendChild(this.dashboard);}bindEvents(){this.dashboard.querySelector('.btn-close').addEventListener('click',()=>{this.hide();});this.dashboard.querySelector('#ws-dash-reconnect').addEventListener('click',()=>{if(window.wsClient){window.wsClient.reconnectManually();}});this.dashboard.querySelector('#ws-dash-disconnect').addEventListener('click',()=>{if(window.wsClient){window.wsClient.disconnect();}});document.addEventListener('websocket:connected',()=> this.updateStatus());document.addEventListener('websocket:disconnected',()=> this.updateStatus());document.addEventListener('websocket:quality_change',()=> this.updateStatus());document.addEventListener('websocket:status_change',()=> this.updateStatus());document.addEventListener('keydown',(e)=>{if(e.ctrlKey && e.shiftKey && e.key === 'W'){e.preventDefault();this.toggle();}});}startUpdating(){this.updateInterval = setInterval(()=>{if(this.isVisible){this.updateStatus();}},2000);}updateStatus(){if(!window.wsClient || !this.isVisible)return;const stats = window.wsClient.getConnectionStats();const statusElement = this.dashboard.querySelector('#ws-dash-status');statusElement.textContent = stats.isConnected ? 'Connected' : 'Disconnected';statusElement.className = stats.isConnected ? 'status-connected' : 'status-disconnected';const qualityElement = this.dashboard.querySelector('#ws-dash-quality');qualityElement.textContent = stats.connectionQuality || 'Unknown';qualityElement.className = `quality-${stats.connectionQuality || 'unknown'}`;const pingElement = this.dashboard.querySelector('#ws-dash-ping');pingElement.textContent = stats.averagePing ? `${stats.averagePing}ms` : '-';const attemptsElement = this.dashboard.querySelector('#ws-dash-attempts');attemptsElement.textContent = `${stats.reconnectAttempts}/${stats.maxReconnectAttempts}`;const roomElement = this.dashboard.querySelector('#ws-dash-room');roomElement.textContent = stats.currentConversation || 'None';const reconnectBtn = this.dashboard.querySelector('#ws-dash-reconnect');const disconnectBtn = this.dashboard.querySelector('#ws-dash-disconnect');reconnectBtn.disabled = stats.isConnected;disconnectBtn.disabled = !stats.isConnected;}show(){this.isVisible = true;this.dashboard.style.display = 'block';this.updateStatus();}hide(){this.isVisible = false;this.dashboard.style.display = 'none';}toggle(){if(this.isVisible){this.hide();}else{this.show();}}destroy(){if(this.updateInterval){clearInterval(this.updateInterval);}if(this.dashboard){this.dashboard.remove();}}}document.addEventListener('DOMContentLoaded',()=>{window.wsDashboard = new WebSocketStatusDashboard();});if(typeof module !== 'undefined' && module.exports){module.exports = WebSocketStatusDashboard;}