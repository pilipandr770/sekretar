class AuthenticationManager{constructor(){this.currentUser = null;this.authCallbacks = [];this.isInitialized = false;this.baseURL = window.location.origin;this.checkAuthStatus = this.checkAuthStatus.bind(this);this.handleLogin = this.handleLogin.bind(this);this.handleLogout = this.handleLogout.bind(this);this.showAuthenticatedUI = this.showAuthenticatedUI.bind(this);this.showUnauthenticatedUI = this.showUnauthenticatedUI.bind(this);}async init(){if(this.isInitialized){return;}console.log('Initializing Authentication Manager...');await this.checkAuthStatus();this.setupEventListeners();this.isInitialized = true;console.log('Authentication Manager initialized');}setupEventListeners(){window.addEventListener('storage',(e)=>{if(e.key === 'access_token'){if(e.newValue === null){this.handleLogout(false);}else if(e.oldValue === null){this.checkAuthStatus();}}});window.addEventListener('beforeunload',()=>{this.cleanup();});const loginForm = document.getElementById('loginForm');if(loginForm){loginForm.addEventListener('submit',this.handleLogin);}document.addEventListener('click',(e)=>{if(e.target.matches('[data-action="logout"]')|| e.target.closest('[data-action="logout"]')){e.preventDefault();this.handleLogout();}});}async checkAuthStatus(){const token = localStorage.getItem('access_token');if(!token){this.showUnauthenticatedUI();return false;}try{const response = await fetch('/api/v1/auth/me',{headers:{'Authorization': `Bearer ${token}`,'Content-Type': 'application/json'}});if(response.ok){const data = await response.json();if(data.success && data.data?.user){this.currentUser = data.data.user;this.showAuthenticatedUI(this.currentUser);this.notifyAuthStateChange(true,this.currentUser);return true;}}else if(response.status === 401){const refreshed = await this.refreshToken();if(refreshed){return await this.checkAuthStatus();}}}catch(error){console.error('Auth check failed:',error);if(window.errorHandler){window.errorHandler.handleNetworkError({url: '/api/v1/auth/me',error: error,isOnline: navigator.onLine});}}this.clearTokens();this.showUnauthenticatedUI();this.notifyAuthStateChange(false,null);return false;}async refreshToken(){const refreshToken = localStorage.getItem('refresh_token');if(!refreshToken){return false;}try{const response = await fetch('/api/v1/auth/refresh',{method: 'POST',headers:{'Content-Type': 'application/json','Authorization': `Bearer ${refreshToken}`}});if(response.ok){const data = await response.json();if(data.success && data.data?.access_token){localStorage.setItem('access_token',data.data.access_token);if(data.data.refresh_token){localStorage.setItem('refresh_token',data.data.refresh_token);}return true;}}}catch(error){console.error('Token refresh failed:',error);if(window.errorHandler){window.errorHandler.handleNetworkError({url: '/api/v1/auth/refresh',error: error,isOnline: navigator.onLine});}}return false;}async handleLogin(e){e.preventDefault();const form = e.target;const submitBtn = form.querySelector('button[type="submit"]');const spinner = submitBtn.querySelector('.spinner-border');this.emitEvent('auth:login_start');this.setLoadingState(submitBtn,spinner,true);this.clearFormErrors(form);try{const formData = new FormData(form);const response = await fetch('/api/v1/auth/login',{method: 'POST',headers:{'Content-Type': 'application/json',},body: JSON.stringify({email: formData.get('email'),password: formData.get('password')})});const data = await response.json();if(data.success){localStorage.setItem('access_token',data.data.access_token);if(data.data.refresh_token){localStorage.setItem('refresh_token',data.data.refresh_token);}this.currentUser = data.data.user;this.emitEvent('auth:login_success',{user: this.currentUser});this.showAlert('success',data.message || 'Login successful');this.showAuthenticatedUI(this.currentUser);this.notifyAuthStateChange(true,this.currentUser);this.hideLoginForm();setTimeout(()=>{const returnUrl = new URLSearchParams(window.location.search).get('return_url');window.location.href = returnUrl || '/dashboard';},1000);}else{this.emitEvent('auth:login_error',{message: data.error?.message || 'Login failed'});this.showAlert('danger',data.error?.message || 'Login failed');this.showFormErrors(form,data.error?.details?.validation_errors);}}catch(error){console.error('Login error:',error);this.emitEvent('auth:login_error',{message: 'An error occurred. Please try again.',error: error});if(window.errorHandler){window.errorHandler.handleNetworkError({url: '/api/v1/auth/login',error: error,isOnline: navigator.onLine});}else{this.showAlert('danger','An error occurred. Please try again.');}}finally{this.setLoadingState(submitBtn,spinner,false);}}async handleLogout(makeApiCall = true){this.emitEvent('auth:logout_start');try{if(makeApiCall){const token = localStorage.getItem('access_token');if(token){await fetch('/api/v1/auth/logout',{method: 'POST',headers:{'Authorization': `Bearer ${token}`,'Content-Type': 'application/json'}});}}}catch(error){console.error('Logout error:',error);if(window.errorHandler){window.errorHandler.handleNetworkError({url: '/api/v1/auth/logout',error: error,isOnline: navigator.onLine});}}finally{this.clearTokens();this.currentUser = null;this.showUnauthenticatedUI();this.emitEvent('auth:logout_complete');this.notifyAuthStateChange(false,null);if(!window.location.pathname.includes('/login')){window.location.href = '/login';}}}showAuthenticatedUI(user){console.log('Showing authenticated UI for:',user.email);const userNameElement = document.getElementById('userName');if(userNameElement){userNameElement.textContent = user.first_name || user.email;}this.toggleElement('auth-links',false);this.toggleElement('auth-links-register',false);this.toggleElement('user-links',true);this.toggleElement('user-links-divider',true);this.toggleElement('user-links-logout',true);if(user.role === 'owner' || user.role === 'manager'){this.toggleElement('user-links-users',true);}this.enableMainNavigation();this.hideLoginForm();this.showMainContent();}showUnauthenticatedUI(){console.log('Showing unauthenticated UI');this.toggleElement('auth-links',true);this.toggleElement('auth-links-register',true);this.toggleElement('user-links',false);this.toggleElement('user-links-users',false);this.toggleElement('user-links-divider',false);this.toggleElement('user-links-logout',false);const userNameElement = document.getElementById('userName');if(userNameElement){userNameElement.textContent = 'Account';}this.disableMainNavigation();this.showLoginFormIfNeeded();}hideLoginForm(){const loginForm = document.getElementById('loginForm');const loginCard = loginForm?.closest('.card');if(loginCard){loginCard.style.transition = 'opacity 0.3s ease-out';loginCard.style.opacity = '0';setTimeout(()=>{loginCard.style.display = 'none';},300);}}showLoginFormIfNeeded(){const protectedRoutes = ['/dashboard','/inbox','/crm','/calendar','/settings'];const currentPath = window.location.pathname;if(protectedRoutes.some(route => currentPath.includes(route))){const returnUrl = encodeURIComponent(window.location.href);window.location.href = `/login?return_url=${returnUrl}`;}}showMainContent(){const mainContent = document.querySelector('main');if(mainContent){mainContent.style.display = 'block';}}enableMainNavigation(){console.log('Navigation enabled for authenticated user');}disableMainNavigation(){console.log('Navigation disabled for unauthenticated user');}onAuthStateChange(callback){if(typeof callback === 'function'){this.authCallbacks.push(callback);}}notifyAuthStateChange(isAuthenticated,user){this.authCallbacks.forEach(callback =>{try{callback(isAuthenticated,user);}catch(error){console.error('Auth callback error:',error);}});}getAuthState(){return{isAuthenticated: !!this.currentUser,user: this.currentUser,token: localStorage.getItem('access_token')};}isAuthenticated(){return !!this.currentUser;}getCurrentUser(){return this.currentUser;}toggleElement(id,show){const element = document.getElementById(id);if(element){if(show){element.classList.remove('d-none');}else{element.classList.add('d-none');}}}setLoadingState(button,spinner,loading){if(button){button.disabled = loading;}if(spinner){if(loading){spinner.classList.remove('d-none');}else{spinner.classList.add('d-none');}}}clearFormErrors(form){form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));form.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');}showFormErrors(form,errors){if(errors){for(const [field,messages] of Object.entries(errors)){const input = form.querySelector(`[name="${field}"]`);if(input){input.classList.add('is-invalid');const feedback = input.nextElementSibling;if(feedback && feedback.classList.contains('invalid-feedback')){feedback.textContent = messages[0];}}}}}showAlert(type,message){const alertDiv = document.createElement('div');alertDiv.className = `alert alert-${type}alert-dismissible fade show`;alertDiv.innerHTML = ` ${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button> `;const container = document.querySelector('.container')|| document.querySelector('main');if(container){container.insertBefore(alertDiv,container.firstChild);}setTimeout(()=>{if(alertDiv.parentNode){alertDiv.remove();}},5000);}clearTokens(){localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');}cleanup(){this.authCallbacks = [];}}emitEvent(eventName,data ={}){const event = new CustomEvent(eventName,{detail: data});document.dispatchEvent(event);}}window.AuthenticationManager = AuthenticationManager;