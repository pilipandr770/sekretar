class ErrorHandler{constructor(){this.errorQueue = [];this.maxErrorQueue = 50;this.isOnline = navigator.onLine;this.errorCounts = new Map();this.maxSameErrorCount = 5;this.notificationContainer = null;this.init();}init(){console.log('Initializing Error Handler...');this.setupGlobalErrorHandlers();this.setupNetworkMonitoring();this.createNotificationContainer();this.setupErrorReporting();console.log('Error Handler initialized');}setupGlobalErrorHandlers(){window.addEventListener('error',(event)=>{this.handleJavaScriptError({message: event.message,filename: event.filename,lineno: event.lineno,colno: event.colno,error: event.error,type: 'javascript'});});window.addEventListener('unhandledrejection',(event)=>{this.handlePromiseRejection({reason: event.reason,promise: event.promise,type: 'promise'});});window.addEventListener('error',(event)=>{if(event.target !== window){this.handleResourceError({element: event.target,source: event.target.src || event.target.href,type: 'resource'});}},true);}setupNetworkMonitoring(){window.addEventListener('online',()=>{this.isOnline = true;this.showNotification('success','Connection restored','You are back online');this.hideOfflineIndicator();this.retryFailedRequests();});window.addEventListener('offline',()=>{this.isOnline = false;this.showNotification('warning','Connection lost','You are currently offline. Some features may not work.');this.showOfflineIndicator();});this.interceptFetchRequests();this.setupGracefulDegradation();}interceptFetchRequests(){const originalFetch = window.fetch;window.fetch = async(...args)=>{try{const response = await originalFetch.apply(this,args);if(!response.ok){this.handleAPIError({url: args[0],status: response.status,statusText: response.statusText,response: response.clone()});}return response;}catch(error){this.handleNetworkError({url: args[0],error: error,isOnline: this.isOnline});if(!this.isOnline && error.name === 'TypeError'){this.addFailedRequest(args[0],args[1]);}throw error;}};}handleJavaScriptError(errorInfo){const errorKey = `${errorInfo.filename}:${errorInfo.lineno}:${errorInfo.message}`;if(this.shouldIgnoreError(errorKey)){return;}console.error('JavaScript Error:',errorInfo);this.addToErrorQueue({...errorInfo,timestamp: new Date().toISOString(),userAgent: navigator.userAgent,url: window.location.href});const userMessage = this.getUserFriendlyMessage(errorInfo);this.showNotification('error','Application Error',userMessage);if(this.isCriticalError(errorInfo)){this.reportError(errorInfo);}}handlePromiseRejection(rejectionInfo){const errorKey = `promise:${rejectionInfo.reason}`;if(this.shouldIgnoreError(errorKey)){return;}console.error('Unhandled Promise Rejection:',rejectionInfo);this.addToErrorQueue({...rejectionInfo,timestamp: new Date().toISOString(),userAgent: navigator.userAgent,url: window.location.href});let userMessage = 'An operation failed to complete';if(rejectionInfo.reason && typeof rejectionInfo.reason === 'string'){if(rejectionInfo.reason.includes('fetch')){userMessage = 'Failed to load data. Please check your connection.';}else if(rejectionInfo.reason.includes('auth')){userMessage = 'Authentication failed. Please log in again.';}}this.showNotification('error','Operation Failed',userMessage);}handleResourceError(errorInfo){console.error('Resource Loading Error:',errorInfo);const resourceType = this.getResourceType(errorInfo.element);let userMessage = `Failed to load ${resourceType}`;if(!this.isOnline){userMessage += '(you are offline)';}this.addToErrorQueue({...errorInfo,resourceType,timestamp: new Date().toISOString(),url: window.location.href});if(this.isCriticalResource(errorInfo.element)){this.showNotification('warning','Loading Error',userMessage);}}async handleAPIError(errorInfo){let errorData = null;try{errorData = await errorInfo.response.json();}catch(e){}console.error('API Error:',{url: errorInfo.url,status: errorInfo.status,statusText: errorInfo.statusText,data: errorData});this.addToErrorQueue({...errorInfo,data: errorData,timestamp: new Date().toISOString(),url: window.location.href});const userMessage = this.getAPIErrorMessage(errorInfo.status,errorData);const severity = this.getAPIErrorSeverity(errorInfo.status);this.showNotification(severity,'Request Failed',userMessage);if(errorInfo.status === 401){this.handleAuthenticationError();}else if(errorInfo.status >= 500){this.handleServerError(errorInfo);}}handleNetworkError(errorInfo){console.error('Network Error:',errorInfo);this.addToErrorQueue({...errorInfo,timestamp: new Date().toISOString(),url: window.location.href});let userMessage = 'Network request failed';if(!errorInfo.isOnline){userMessage = 'You are offline. Please check your internet connection.';}else if(errorInfo.error.name === 'TypeError'){userMessage = 'Unable to connect to server. Please try again.';}else if(errorInfo.error.name === 'AbortError'){userMessage = 'Request was cancelled or timed out.';}this.showNotification('error','Connection Error',userMessage);}getUserFriendlyMessage(errorInfo){if(errorInfo.message.includes('is not defined')){return 'A required component failed to load. Please refresh the page.';}else if(errorInfo.message.includes('Cannot read property')){return 'An unexpected error occurred. Please try again.';}else if(errorInfo.message.includes('fetch')){return 'Failed to load data. Please check your connection.';}else if(errorInfo.message.includes('Permission denied')){return 'Permission denied. Please check your access rights.';}else if(errorInfo.message.includes('Network Error')){return 'Network connection failed. Please check your internet connection.';}return 'An unexpected error occurred. Please refresh the page if the problem persists.';}getAPIErrorMessage(status,errorData){const messages ={400: 'Invalid request. Please check your input.',401: 'Authentication required. Please log in.',403: 'Access denied. You don\'t have permission for this action.',404: 'The requested resource was not found.',409: 'Conflict occurred. The resource may have been modified.',422: 'Validation failed. Please check your input.',429: 'Too many requests. Please wait a moment and try again.',500: 'Server error occurred. Please try again later.',502: 'Service temporarily unavailable. Please try again.',503: 'Service maintenance in progress. Please try again later.',504: 'Request timed out. Please try again.'};if(errorData && errorData.error && errorData.error.message){return errorData.error.message;}return messages[status] || `Request failed with status ${status}`;}getAPIErrorSeverity(status){if(status >= 500)return 'error';if(status === 401 || status === 403)return 'warning';if(status === 429)return 'info';return 'warning';}handleAuthenticationError(){localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');if(window.aiSecretaryApp && window.aiSecretaryApp.authManager){window.aiSecretaryApp.authManager.showUnauthenticatedUI();}setTimeout(()=>{const returnUrl = encodeURIComponent(window.location.href);window.location.href = `/login?return_url=${returnUrl}`;},2000);}handleServerError(errorInfo){this.reportError({type: 'server_error',status: errorInfo.status,url: errorInfo.url,timestamp: new Date().toISOString()});}shouldIgnoreError(errorKey){const count = this.errorCounts.get(errorKey)|| 0;this.errorCounts.set(errorKey,count + 1);return count >= this.maxSameErrorCount;}isCriticalError(errorInfo){const criticalPatterns = [ 'ReferenceError','TypeError: Cannot read property','SecurityError','Authentication','Authorization' ];return criticalPatterns.some(pattern => errorInfo.message.includes(pattern));}getResourceType(element){const tagName = element.tagName.toLowerCase();switch(tagName){case 'script': return 'JavaScript file';case 'link': return 'stylesheet';case 'img': return 'image';case 'video': return 'video';case 'audio': return 'audio';default: return 'resource';}}isCriticalResource(element){const tagName = element.tagName.toLowerCase();if(tagName === 'script'){const src = element.src;return src.includes('app.js')|| src.includes('auth-manager.js')|| src.includes('bootstrap')|| src.includes('socket.io');}if(tagName === 'link' && element.rel === 'stylesheet'){return element.href.includes('bootstrap')|| element.href.includes('app.css');}return false;}addToErrorQueue(error){this.errorQueue.push(error);if(this.errorQueue.length > this.maxErrorQueue){this.errorQueue.shift();}}createNotificationContainer(){if(document.getElementById('error-notifications')){return;}const container = document.createElement('div');container.id = 'error-notifications';container.className = 'error-notifications';container.style.cssText = ` position: fixed;top: 20px;right: 20px;z-index: 9999;max-width: 400px;`;document.body.appendChild(container);this.notificationContainer = container;}showNotification(type,title,message,duration = 5000){if(!this.notificationContainer){this.createNotificationContainer();}const notification = document.createElement('div');notification.className = `alert alert-${type}alert-dismissible fade show error-notification`;notification.style.cssText = ` margin-bottom: 10px;box-shadow: 0 4px 6px rgba(0,0,0,0.1);`;notification.innerHTML = ` <strong>${title}</strong> <div>${message}</div> <button type="button" class="btn-close" data-bs-dismiss="alert"></button> `;this.notificationContainer.appendChild(notification);if(duration > 0){setTimeout(()=>{if(notification.parentNode){notification.remove();}},duration);}const notifications = this.notificationContainer.querySelectorAll('.error-notification');if(notifications.length > 5){notifications[0].remove();}}retryFailedRequests(){console.log('Connection restored - you may retry failed operations');}async reportError(errorInfo){try{const token = localStorage.getItem('access_token');if(!token)return;await fetch('/api/v1/errors/report',{method: 'POST',headers:{'Content-Type': 'application/json','Authorization': `Bearer ${token}`},body: JSON.stringify({error: errorInfo,timestamp: new Date().toISOString(),user_agent: navigator.userAgent,url: window.location.href})});}catch(e){console.debug('Error reporting failed:',e);}}setupErrorReporting(){setInterval(()=>{if(this.errorQueue.length > 0){this.reportBatchErrors();}},5 * 60 * 1000);}async reportBatchErrors(){if(this.errorQueue.length === 0)return;try{const token = localStorage.getItem('access_token');if(!token)return;const errors = [...this.errorQueue];this.errorQueue = [];await fetch('/api/v1/errors/batch',{method: 'POST',headers:{'Content-Type': 'application/json','Authorization': `Bearer ${token}`},body: JSON.stringify({errors: errors,session_id: this.getSessionId(),timestamp: new Date().toISOString()})});}catch(e){console.debug('Batch error reporting failed:',e);}}getSessionId(){let sessionId = sessionStorage.getItem('error_session_id');if(!sessionId){sessionId = 'session_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9);sessionStorage.setItem('error_session_id',sessionId);}return sessionId;}getErrorStats(){return{totalErrors: this.errorQueue.length,errorCounts: Object.fromEntries(this.errorCounts),isOnline: this.isOnline,sessionId: this.getSessionId()};}clearErrors(){this.errorQueue = [];this.errorCounts.clear();}setNotificationsEnabled(enabled){this.notificationsEnabled = enabled;if(!enabled && this.notificationContainer){this.notificationContainer.style.display = 'none';}else if(enabled && this.notificationContainer){this.notificationContainer.style.display = 'block';}}setupGracefulDegradation(){this.setupOfflineMode();this.setupRetryMechanisms();this.setupFallbackStates();}setupOfflineMode(){const handleOfflineMode =()=>{if(window.wsClient){window.wsClient.disconnect();}this.markOfflineElements();this.cachePageState();};const handleOnlineMode =()=>{if(window.wsClient){window.wsClient.reconnectManually();}this.unmarkOfflineElements();this.restorePageState();};if(!this.isOnline){handleOfflineMode();}window.addEventListener('offline',handleOfflineMode);window.addEventListener('online',handleOnlineMode);}setupRetryMechanisms(){this.failedRequests = [];this.maxRetries = 3;this.retryDelay = 1000;}setupFallbackStates(){this.checkDependencies();this.checkStylesheets();}checkDependencies(){const requiredDependencies = [{name: 'Bootstrap',check:()=> typeof bootstrap !== 'undefined'},{name: 'Socket.IO',check:()=> typeof io !== 'undefined'}];requiredDependencies.forEach(dep =>{if(!dep.check()){console.warn(`${dep.name}not loaded - some features may not work`);this.showNotification('warning','Feature Unavailable',`${dep.name}failed to load. Some features may not work properly.`);}});}checkStylesheets(){const stylesheets = document.querySelectorAll('link[rel="stylesheet"]');stylesheets.forEach(link =>{link.addEventListener('error',()=>{console.warn('Stylesheet failed to load:',link.href);this.showNotification('warning','Styling Issue','Some styles failed to load. The page may not look correct.');});});}showOfflineIndicator(){let indicator = document.getElementById('offline-indicator');if(!indicator){indicator = document.createElement('div');indicator.id = 'offline-indicator';indicator.className = 'offline-indicator';indicator.textContent = 'You are offline - some features may not work';document.body.insertBefore(indicator,document.body.firstChild);}indicator.style.display = 'block';}hideOfflineIndicator(){const indicator = document.getElementById('offline-indicator');if(indicator){indicator.style.display = 'none';}}markOfflineElements(){const networkButtons = document.querySelectorAll('[data-requires-network]');networkButtons.forEach(button =>{button.disabled = true;button.title = 'This feature requires an internet connection';button.classList.add('offline-disabled');});const forms = document.querySelectorAll('form[data-requires-network]');forms.forEach(form =>{let offlineMsg = form.querySelector('.offline-message');if(!offlineMsg){offlineMsg = document.createElement('div');offlineMsg.className = 'alert alert-warning offline-message';offlineMsg.textContent = 'This form requires an internet connection to submit.';form.insertBefore(offlineMsg,form.firstChild);}});}unmarkOfflineElements(){const networkButtons = document.querySelectorAll('.offline-disabled');networkButtons.forEach(button =>{button.disabled = false;button.title = '';button.classList.remove('offline-disabled');});const offlineMessages = document.querySelectorAll('.offline-message');offlineMessages.forEach(msg => msg.remove());}cachePageState(){try{const state ={url: window.location.href,timestamp: Date.now(),formData: this.getFormData(),scrollPosition: window.scrollY};sessionStorage.setItem('offline_page_state',JSON.stringify(state));}catch(e){console.debug('Failed to cache page state:',e);}}restorePageState(){try{const cached = sessionStorage.getItem('offline_page_state');if(cached){const state = JSON.parse(cached);if(Date.now()- state.timestamp < 5 * 60 * 1000){this.restoreFormData(state.formData);window.scrollTo(0,state.scrollPosition);}sessionStorage.removeItem('offline_page_state');}}catch(e){console.debug('Failed to restore page state:',e);}}getFormData(){const forms = document.querySelectorAll('form');const formData ={};forms.forEach((form,index)=>{const data = new FormData(form);const formObj ={};for(let [key,value] of data.entries()){formObj[key] = value;}if(Object.keys(formObj).length > 0){formData[`form_${index}`] = formObj;}});return formData;}restoreFormData(formData){if(!formData)return;const forms = document.querySelectorAll('form');forms.forEach((form,index)=>{const cached = formData[`form_${index}`];if(cached){Object.entries(cached).forEach(([name,value])=>{const input = form.querySelector(`[name="${name}"]`);if(input && input.type !== 'password'){input.value = value;}});}});}retryFailedRequests(){if(this.failedRequests.length === 0)return;console.log(`Retrying ${this.failedRequests.length}failed requests...`);const requests = [...this.failedRequests];this.failedRequests = [];requests.forEach(async(request,index)=>{try{await new Promise(resolve => setTimeout(resolve,index * 100));const response = await fetch(request.url,request.options);if(response.ok){console.log('Successfully retried request:',request.url);}else{if(request.retryCount < this.maxRetries){request.retryCount =(request.retryCount || 0)+ 1;this.failedRequests.push(request);}}}catch(error){if(request.retryCount < this.maxRetries){request.retryCount =(request.retryCount || 0)+ 1;this.failedRequests.push(request);}}});}addFailedRequest(url,options ={}){this.failedRequests.push({url,options,timestamp: Date.now(),retryCount: 0});}}document.addEventListener('DOMContentLoaded',()=>{window.errorHandler = new ErrorHandler();});if(typeof module !== 'undefined' && module.exports){module.exports = ErrorHandler;}