class UIStateManager{constructor(){this.state ={isAuthenticated: false,currentUser: null,currentLanguage: 'en',isWebSocketConnected: false,activeNavItem: null,notifications: [],isLoading: false};this.subscribers = [];this.isInitialized = false;}init(){if(this.isInitialized){return;}console.log('Initializing UI State Manager...');this.state.currentLanguage = document.documentElement.lang || 'en';this.updateActiveNavItem();this.setupEventListeners();this.isInitialized = true;console.log('UI State Manager initialized');}setupEventListeners(){window.addEventListener('popstate',()=>{this.updateActiveNavItem();});window.addEventListener('localechange',(event)=>{this.updateState({currentLanguage: event.detail.locale});});window.addEventListener('languagechange',(event)=>{this.updateState({currentLanguage: event.detail.language});});document.addEventListener('websocket:connected',()=>{this.updateState({isWebSocketConnected: true});});document.addEventListener('websocket:disconnected',()=>{this.updateState({isWebSocketConnected: false});});document.addEventListener('websocket:status_change',(event)=>{this.updateState({isWebSocketConnected: event.detail.status === 'connected'});});document.addEventListener('user:login',(event)=>{this.updateState({isAuthenticated: true,currentUser: event.detail.user});});document.addEventListener('user:logout',()=>{this.updateState({isAuthenticated: false,currentUser: null});});document.addEventListener('page:loaded',()=>{this.updateActiveNavItem();});document.addEventListener('notification:received',(event)=>{this.addNotification({type: 'info',title: event.detail.title || 'Notification',message: event.detail.message,source: 'websocket'});});document.addEventListener('notification:tenant',(event)=>{this.addNotification({type: 'warning',title: event.detail.title || 'System Notification',message: event.detail.message,source: 'system'});});document.addEventListener('alert:system',(event)=>{this.addNotification({type: 'danger',title: event.detail.title || 'System Alert',message: event.detail.message,urgent: event.detail.urgent,source: 'system'});});}updateState(newState){const oldState ={...this.state};this.state ={...this.state,...newState};this.notifySubscribers(this.state,oldState);}getState(){return{...this.state};}subscribe(callback){if(typeof callback === 'function'){this.subscribers.push(callback);}}unsubscribe(callback){const index = this.subscribers.indexOf(callback);if(index > -1){this.subscribers.splice(index,1);}}notifySubscribers(newState,oldState){this.subscribers.forEach(callback =>{try{callback(newState,oldState);}catch(error){console.error('UI state subscriber error:',error);}});}updateAuthState(isAuthenticated,user){this.updateState({isAuthenticated,currentUser: user});}updateActiveNavItem(){const currentPath = window.location.pathname;let activeItem = null;if(currentPath.includes('/dashboard')){activeItem = 'dashboard';}else if(currentPath.includes('/inbox')){activeItem = 'inbox';}else if(currentPath.includes('/crm')){activeItem = 'crm';}else if(currentPath.includes('/calendar')){activeItem = 'calendar';}else if(currentPath.includes('/settings')){activeItem = 'settings';}else if(currentPath.includes('/users')){activeItem = 'users';}if(activeItem !== this.state.activeNavItem){this.updateState({activeNavItem: activeItem});}}highlightActiveNavItem(activeItem){console.log('Active nav item:',activeItem);}addNotification(notification){const notifications = [...this.state.notifications,{id: Date.now(),timestamp: new Date(),...notification}];this.updateState({notifications});}removeNotification(id){const notifications = this.state.notifications.filter(n => n.id !== id);this.updateState({notifications});}clearNotifications(){this.updateState({notifications: []});}setLoading(isLoading){this.updateState({isLoading});}updateLanguage(language){this.updateState({currentLanguage: language});}updateWebSocketState(isConnected){this.updateState({isWebSocketConnected: isConnected});}get(property){return this.state[property];}isAuthenticated(){return this.state.isAuthenticated;}getCurrentUser(){return this.state.currentUser;}getCurrentLanguage(){return this.state.currentLanguage;}isWebSocketConnected(){return this.state.isWebSocketConnected;}getActiveNavItem(){return this.state.activeNavItem;}getNotifications(){return [...this.state.notifications];}isLoading(){return this.state.isLoading;}integrateWithAuthManager(authManager){if(!authManager)return;authManager.onAuthStateChange((isAuthenticated,user)=>{this.updateAuthState(isAuthenticated,user);});const authState = authManager.getAuthState();this.updateAuthState(authState.isAuthenticated,authState.user);}integrateWithNavigationController(navigationController){if(!navigationController)return;this.subscribe((newState,oldState)=>{if(newState.activeNavItem !== oldState.activeNavItem){console.log('Navigation state updated:',newState.activeNavItem);}});}integrateWithWebSocketClient(wsClient){if(!wsClient)return;wsClient.on('websocket:connected',()=>{this.updateWebSocketState(true);});wsClient.on('websocket:disconnected',()=>{this.updateWebSocketState(false);});wsClient.on('websocket:status_change',(event)=>{this.updateWebSocketState(event.detail.status === 'connected');});}integrateWithLanguageSwitcher(languageSwitcher){if(!languageSwitcher)return;this.subscribe((newState,oldState)=>{if(newState.currentLanguage !== oldState.currentLanguage){document.dispatchEvent(new CustomEvent('ui:language_changed',{detail:{language: newState.currentLanguage,previousLanguage: oldState.currentLanguage}}));}});}synchronizeState(){document.dispatchEvent(new CustomEvent('ui:state_sync',{detail:{state: this.getState()}}));this.updateUIElements();}updateUIElements(){if(this.state.isAuthenticated){document.body.classList.add('authenticated');document.body.classList.remove('unauthenticated');}else{document.body.classList.add('unauthenticated');document.body.classList.remove('authenticated');}if(this.state.isWebSocketConnected){document.body.classList.add('websocket-connected');document.body.classList.remove('websocket-disconnected');}else{document.body.classList.add('websocket-disconnected');document.body.classList.remove('websocket-connected');}if(this.state.currentLanguage){document.documentElement.lang = this.state.currentLanguage;}if(this.state.isLoading){document.body.classList.add('loading');}else{document.body.classList.remove('loading');}this.highlightActiveNavigation();}highlightActiveNavigation(){document.querySelectorAll('#main-nav .nav-link').forEach(link =>{link.classList.remove('active');});if(this.state.activeNavItem){const activeLink = document.querySelector(`#main-nav .nav-link[href*="${this.state.activeNavItem}"]`);if(activeLink){activeLink.classList.add('active');}}}getStateSnapshot(){return{timestamp: new Date().toISOString(),state:{...this.state},subscriberCount: this.subscribers.length,isInitialized: this.isInitialized};}validateState(){const issues = [];const requiredProps = ['isAuthenticated','currentLanguage','isWebSocketConnected'];requiredProps.forEach(prop =>{if(this.state[prop] === undefined){issues.push(`Missing required property: ${prop}`);}});if(typeof this.state.isAuthenticated !== 'boolean'){issues.push('isAuthenticated must be boolean');}if(typeof this.state.isWebSocketConnected !== 'boolean'){issues.push('isWebSocketConnected must be boolean');}if(typeof this.state.currentLanguage !== 'string'){issues.push('currentLanguage must be string');}if(!Array.isArray(this.state.notifications)){issues.push('notifications must be array');}return{isValid: issues.length === 0,issues: issues};}resetState(){this.state ={isAuthenticated: false,currentUser: null,currentLanguage: 'en',isWebSocketConnected: false,activeNavItem: null,notifications: [],isLoading: false};this.notifySubscribers(this.state,{});this.updateUIElements();}cleanup(){window.removeEventListener('popstate',this.updateActiveNavItem);this.subscribers = [];this.isInitialized = false;console.log('UI State Manager cleaned up');}}window.UIStateManager = UIStateManager;